---
title: "R Lab 2 - Data Transformation"
author: "Byeong-Hak Choe"
editor: visual
---

```{r setup, include = FALSE}
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggthemes)
library(ggtech)
library(ggthemr)
library(hrbrthemes)
library(hexbin)
library(ggforce)
library(skimr)

knitr::opts_chunk$set(fig.width=8, fig.height=5)  

theme_set(theme_ipsum() +
          theme(strip.background =element_rect(fill="lightgray")))


url <- 'https://bcdanl.github.io/data/bikeshare_cleaned.csv'
bikeshare <- read_csv(url)

url2 <- 'https://bcdanl.github.io/data/NY_school_enrollment_socioecon.csv'
ny_school_enrollment_socio <- read_csv(url2)
```

### Loading R packages

```{r, eval = F, echo = T}
library(tidyverse)
library(skimr)
```

# Question 1 - Tweets with #climatechange

The following data is for Question 1:

```{r, echo = T, eval = T, message=F}
NY_CC_tweets <- read_csv(
  'https://bcdanl.github.io/data/NY_tweets_cc_no_contents.csv')
```

```{r, result = 'asis', echo = F, message = F, warning = F}
rmarkdown::paged_table(NY_CC_tweets) 
```

<br><br>

## Variable Description

-   `id_user`: a unique identification number for a Twitter user whom retweeted to a tweet with *#climatechange* or *#globalwarming*.
-   `id_city`: a unique identification number for a city.
-   `FIPS`: a unique identification number for a county.

Each row represents an observation of a retweet to a tweet with *#climatechange* or *#globalwarming*.

Each row includes a Twitter user's geographic information at city or county levels (variables `FIPS`, `county`, `city`) as well as information about timing when a Twitter user retweeted (variables `year`, `month`, `day`, `hour`, `minute`, `second`).

## Q1a

How many Twitter users retweeted on the date, January 1, 2017?

```{r, echo = T, eval = F}
# 1. using filter(), select(), and distinct()
Q1a <- NY_CC_tweets %>% 
  filter(year == 2017, month == 1, day == 1) %>% 
  select(id_user) %>% 
  distinct()  
# 19


# 2. using filter() and summarise() with n_distinct()
Q1a <- NY_CC_tweets %>% 
  filter(year == 2017, month == 1, day == 1) %>% 
  summarise(n_users = n_distinct(id_user))
# 19


# 3. using filter(), select() and mutate() with n() and distinct()
Q1a <- NY_CC_tweets %>% 
  filter(year == 2017, month == 1, day == 1) %>% 
  select(id_user, year, month, day) %>% 
  distinct() %>% 
  mutate( n_users = n() ) %>% 
  select( year, month, day, n_users ) %>% 
  distinct()
# 19
```

<br><br>

## Q1b

Which city is with the third highest number of retweets on the date, December 1, 2017?

```{r, echo = T, eval = F}
# 1. filter(), group_by(), 
# mutate() with n(), select(), distinct(), and arrange()
Q1b <- NY_CC_tweets %>% 
  filter(year == 2017, month == 12, day == 1) %>% 
  group_by(id_city) %>% 
  mutate(n_rt = n()) %>% 
  select(id_city, city, n_rt) %>% 
  distinct() %>% 
  arrange(-n_rt)
# brooklyn, ny 


# 2. filter(), group_by(), 
# summarise() with n(), and arrange()
Q1b <- NY_CC_tweets %>% 
  filter(year == 2017, month == 12, day == 1) %>% 
  group_by(id_city, city) %>% 
  summarize(n_rt = n()) %>% 
  arrange(-n_rt)
# brooklyn, ny 


# 3. filter(), group_by(), 
# summarise() with n(), ungroup(), and mutate() with dense_rank()
Q1b <- NY_CC_tweets %>% 
  filter(year == 2017, month == 12, day == 1) %>% 
  group_by(id_city, city) %>% 
  summarize(n_rt = n()) %>%
  ungroup() %>%  # dense_rank() calculates rankings within a group.
  mutate(ranking = dense_rank(desc(n_rt))) %>% 
  filter(ranking == 3)
# brooklyn, ny
```

```{r, result = 'asis', echo = F, message = F, warning = F}
Q1b <- NY_CC_tweets %>% 
  filter(year == 2017, month == 12, day == 1) %>% 
  group_by(id_city, city) %>% 
  summarize(n_rt = n()) %>% 
  arrange(-n_rt)
rmarkdown::paged_table(Q1b) 
```

<br><br>

## Q1c

For each year, find the top 5 Twitter users in NY state in terms of the number of retweets they made in NY state. In which city and county do these users live in?

```{r, echo = T, eval = F}
# 1. group_by(), mutate() with n(), 
# group_by(), mutate() with dense_rank(), 
# filter(), select(), distinct(), and arrange()
Q1c <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% # the number of retweets for each user for each year
  group_by( year ) %>%  # dense_rank() calculates rankings within a group.
  mutate( n_rt_rank = dense_rank( desc(n_rt) ) ) %>% 
  filter( n_rt_rank <= 5 ) %>% 
  select(-(month:second)) %>% # Need to remove from 'month' to 'second' to use distinct().
  distinct() %>% 
  arrange(year, n_rt_rank)


# 2. group_by(), summarise() with n(), 
# filter(), arrange(), and head()
Q1c_2012 <- NY_CC_tweets %>% 
  group_by( id_user, year, city, county ) %>% 
  summarise( n_rt = n() ) %>% 
  filter( year == 2012 ) %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2013 <- NY_CC_tweets %>% 
  group_by( id_user, year, city, county ) %>% 
  summarise( n_rt = n() ) %>% 
  filter( year == 2013 ) %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2014 <- NY_CC_tweets %>% 
  group_by( id_user, year, city, county ) %>% 
  summarise( n_rt = n() ) %>% 
  filter( year == 2014 ) %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2015 <- NY_CC_tweets %>% 
  group_by( id_user, year, city, county ) %>% 
  summarise( n_rt = n() ) %>% 
  filter( year == 2015 ) %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2016 <- NY_CC_tweets %>% 
  group_by( id_user, year, city, county ) %>% 
  summarise( n_rt = n() ) %>% 
  filter( year == 2016 ) %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2017 <- NY_CC_tweets %>% 
  group_by( id_user, year, city, county ) %>% 
  summarise( n_rt = n() ) %>% 
  filter( year == 2017 ) %>% 
  arrange(-n_rt) %>% 
  head(5)


# 4. group_by(), mutate() with n(), 
# filter(), select(), unique(), arrange(), and head()
Q1c_2012 <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% 
  filter( year == 2012 ) %>% 
  select(year, id_user, n_rt, city, county) %>% 
  unique() %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2013 <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% 
  filter( year == 2013 ) %>% 
  select(year, id_user, n_rt, city, county) %>% 
  unique() %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2014 <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% 
  filter( year == 2014 ) %>% 
  select(year, id_user, n_rt, city, county) %>% 
  unique() %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2015 <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% 
  filter( year == 2015 ) %>% 
  select(year, id_user, n_rt, city, county) %>% 
  unique() %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2016 <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% 
  filter( year == 2016 ) %>% 
  select(year, id_user, n_rt, city, county) %>% 
  unique() %>% 
  arrange(-n_rt) %>% 
  head(5)

Q1c_2017 <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% 
  filter( year == 2017 ) %>% 
  select(year, id_user, n_rt, city, county) %>% 
  unique() %>% 
  arrange(-n_rt) %>% 
  head(5)


# cf. I do not require using functions, 
# but here I am showing you how functions make code simpler
top_users_yr <- function(yr){
  NY_CC_tweets %>% 
    group_by( id_user, year ) %>% 
    mutate( n_rt = n() ) %>% 
    filter( year == yr) %>% 
    select(year, id_user, n_rt, city, county) %>% 
    unique() %>% 
    arrange(-n_rt)
}

for (i in 2012:2017){
  print(head(top_users_yr(i), n = 5))
}
```

```{r, result = 'asis', echo = F, message = F, warning = F}
Q1c <- NY_CC_tweets %>% 
  group_by( id_user, year ) %>% 
  mutate( n_rt = n() ) %>% # the number of retweets for each user for each year
  group_by( year ) %>%  # dense_rank() calculates rankings within a group.
  mutate( n_rt_rank = dense_rank( desc(n_rt) ) ) %>% 
  filter( n_rt_rank <= 5 ) %>% 
  select(-(month:second)) %>% # Need to remove from 'month' to 'second' to use distinct().
  distinct() %>% 
  arrange(year, n_rt_rank)

rmarkdown::paged_table(Q1c) 
```

<br><br>

## Q1d

Summarize the data set into the data frame with county and month levels of retweets with the following variables:

-   `FIPS`, `county`, `year`, `month`;
-   `n_retweets`: the number of retweets in `year` *YYYY* and `month` *MM* from `county` `C`.

The `unique()` or `distinct()` functions can be used to keep only unique/distinct rows from a data frame.

```{r, echo = T, eval = F}
# 1. group_by() and summarize() with n()
Q1d <- NY_CC_tweets %>% 
  group_by(FIPS, county, year, month) %>% 
  summarise(n_retweets = n())

# 2. count() and rename()
Q1d <- NY_CC_tweets %>% 
  count(FIPS, county, year, month) %>% 
  rename(n_retweets = n)

# 3. group_by(), mutate() with n(), 
# select(), arrange() and distinct()
Q1d <- NY_CC_tweets %>% 
  group_by(FIPS, county, year, month) %>% 
  mutate(n_retweets = n()) %>% 
  select(FIPS, county, year, month, n_retweets) %>% 
  arrange(FIPS, county, year, month) %>% 
  distinct()

Q1d <- NY_CC_tweets %>% 
  mutate(dum = 1) %>% 
  group_by(FIPS, county, year, month) %>% 
  mutate(n_retweets = sum(dum)) %>% 
  select(FIPS, county, year, month, n_retweets) %>% 
  arrange(FIPS, county, year, month) %>% 
  distinct()

```

```{r, result = 'asis', echo = F, message = F, warning = F}
Q1d <- NY_CC_tweets %>% 
  group_by(FIPS, county, year, month) %>% 
  summarise(n_retweets = n())

rmarkdown::paged_table(Q1d) 
```

<br><br>

## Q1e

Describe the relationship between the number of retweets and `county` using ggplot. Make a simple comment on your plot.

```{r, echo = T, eval = F}
Q1e <- NY_CC_tweets %>% 
  group_by(county) %>% 
  summarize(n_retweets = n())
```

```{r, result = 'asis', echo = F, message = F, warning = F}
Q1e <- NY_CC_tweets %>% 
  group_by(county) %>% 
  summarize(n_retweets = n())

rmarkdown::paged_table(Q1e) 
```

```{r, echo = T, eval = F}
ggplot(data = Q1e) +
  geom_col(aes(x = n_retweets, y = county)) 
# Most retweets about #climatechange came from New York county.
```

```{r, echo = F, eval = T}
ggplot(data = Q1e) +
  geom_col(aes(x = n_retweets, y = county)) 
# Most retweets about #climatechange came from New York county.
```

<br><br>

```{r, echo = T, eval = F}
ggplot(data = Q1e) +
  geom_col(aes(x = n_retweets, 
               y = reorder(county, n_retweets) ))
# reorder(CATEGORICAL_VAR, CONTINUOUS_VAR) reorders 
# CATEGORICAL_VAR based on a values of CONTINUOUS_VAR
```

```{r, echo = F, eval = T}
ggplot(data = Q1e) +
  geom_col(aes(x = n_retweets, 
               y = reorder(county, n_retweets) ))
# reorder(CATEGORICAL_VAR, CONTINUOUS_VAR) reorders 
# values of CATEGORICAL_VAR 
# based on values of CONTINUOUS_VAR.
```

# Question 2 - Beer Markets

The following data is for Question 2:

```{r, echo = T, eval = T, message=F}
beer_markets <- read_csv(
  'https://bcdanl.github.io/data/beer_markets.csv'
)
```

```{r, result = 'asis', echo = F, message = F, warning = F}
rmarkdown::paged_table(beer_markets) 
```

<br><br>

## Variable Description

Each observation in `beer_markets.csv` is a household-level record for one transaction of beer.

<br>

-   `hh`: an identifier of the household;
-   `X_purchase_desc`: details on the purchased item;
-   `quantity`: the number of items purchased;
-   `brand`: Bud Light, Busch Light, Coors Light, Miller Lite, or Natural Light;
-   `spent`: total dollar value of purchase;
-   `beer_floz`: total volume of beer, in fluid ounces;
-   `price_per_floz`: price per fl.oz. (i.e., beer spent/beer floz);
-   `container`: the type of container;
-   `promo`: Whether the item was promoted (coupon or otherwise);
-   `market`: Scan-track market (or state if rural);
-   demographic data, including gender, marital status, household income, class of work, race, education, age, the size of household, and whether or not the household has a microwave or a dishwasher.

<br><br>

## Q2a

-   Find the top 5 markets in terms of the total volume of beer.
-   Find the top 5 markets in terms of the total volume of *BUD LIGHT*.
-   Find the top 5 markets in terms of the total volume of *BUSCH LIGHT*.
-   Find the top 5 markets in terms of the total volume of *COORS LIGHT*.
-   Find the top 5 markets in terms of the total volume of *MILLER LITE*.
-   Find the top 5 markets in terms of the total volume of *NATURAL LIGHT*.

```{r, eval = T, echo = F, warning = F, message = F}
beer_markets <- read_csv(
  'https://bcdanl.github.io/data/beer_markets.csv'
)
```

```{r, eval = T, echo = T, warning = F, message = F}
Q2a1 <- beer_markets %>% 
   group_by(market) %>% 
   summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>% 
   arrange(-beer_floz_tot) %>% 
   slice(1:5)

Q2a_bud <- beer_markets %>% 
  filter(brand == "BUD LIGHT") %>% 
  group_by(market) %>% 
  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>% 
  arrange(-beer_floz_tot) %>% 
  slice(1:5)

Q2a_busch <- beer_markets %>% 
  filter(brand == "BUSCH LIGHT") %>% 
  group_by(market) %>% 
  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>% 
  arrange(-beer_floz_tot) %>% 
  slice(1:5)

Q2a_coors <- beer_markets %>% 
  filter(brand == "COORS LIGHT") %>% 
  group_by(market) %>% 
  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>% 
  arrange(-beer_floz_tot) %>% 
  slice(1:5)

Q2a_miller <- beer_markets %>% 
  filter(brand == "MILLER LITE") %>% 
  group_by(market) %>% 
  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>% 
  arrange(-beer_floz_tot) %>% 
  slice(1:5)

Q2a_natural <- beer_markets %>% 
  filter(brand == "NATURAL LIGHT") %>% 
  group_by(market) %>% 
  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>% 
  arrange(-beer_floz_tot) %>% 
  slice(1:5)


```

<br><br>

## Q2b

-   For households that purchased *BUD LIGHT*, what fraction of households did purchase only *BUD LIGHT*?

-   For households that purchased *BUSCH LIGHT*, what fraction of households did purchase only *BUSCH LIGHT*?

-   For households that purchased *COORS LIGHT*, what fraction of households did purchase only *COORS LIGHT*?

-   For households that purchased *MILLER LITE*, what fraction of households did purchase only *MILLER LITE*?

-   For households that purchased *NATURAL LIGHT*, what fraction of households did purchase only *NATURAL LIGHT*?

-   Which beer brand does have the largest base of loyal consumers?

```{r, eval = T, echo = T, warning = F, message = F}
beer_markets <- beer_markets %>% 
  mutate(bud = ifelse(brand=="BUD LIGHT", 1, 0),
         busch = ifelse(brand=="BUSCH LIGHT", 1, 0),
         coors = ifelse(brand=="COORS LIGHT", 1, 0),
         miller = ifelse(brand=="MILLER LITE", 1, 0),
         natural = ifelse(brand=="NATURAL LIGHT", 1, 0) )

Q2b_bud <- beer_markets %>%
  select(hh, bud) %>%
  arrange(hh, -bud) %>%
  group_by(hh) %>%
  filter(sum(bud) > 0) %>% 
  mutate(frac_bud = sum(bud)/n(),
         loyal_bud = ifelse(frac_bud == 1, 1, 0)) %>%
  select(hh, frac_bud, loyal_bud) %>% 
  unique() %>% 
  ungroup() %>% 
  mutate(n_hh_bud = n()) %>%
  group_by(loyal_bud, n_hh_bud) %>% 
  summarise(n_obs = n()) %>% 
  ungroup() %>% 
  mutate(n_frac = n_obs/n_hh_bud )  # 0.6600816


Q2b_busch <- beer_markets %>%
  select(hh, busch) %>%
  arrange(hh, -busch) %>%
  group_by(hh) %>%
  filter(sum(busch) > 0) %>% 
  mutate(frac_busch = sum(busch)/n(),
         loyal_busch = ifelse(frac_busch == 1, 1, 0)) %>%
  select(hh, frac_busch, loyal_busch) %>% 
  unique() %>% 
  ungroup() %>% 
  mutate(n_hh_busch = n()) %>%
  group_by(loyal_busch, n_hh_busch) %>% 
  summarise(n_obs = n()) %>% 
  ungroup() %>% 
  mutate(n_frac = n_obs/n_hh_busch )  # 0.472973


Q2b_coors <- beer_markets %>%
  select(hh, coors) %>%
  arrange(hh, -coors) %>%
  group_by(hh) %>%
  filter(sum(coors) > 0) %>% 
  mutate(frac_coors = sum(coors)/n(),
         loyal_coors = ifelse(frac_coors == 1, 1, 0)) %>%
  select(hh, frac_coors, loyal_coors) %>% 
  unique() %>% 
  ungroup() %>% 
  mutate(n_hh_coors = n()) %>%
  group_by(loyal_coors, n_hh_coors) %>% 
  summarise(n_obs = n()) %>% 
  ungroup() %>% 
  mutate(n_frac = n_obs/n_hh_coors )  # 0.6390805


Q2b_miller <- beer_markets %>%
  select(hh, miller) %>%
  arrange(hh, -miller) %>%
  group_by(hh) %>%
  filter(sum(miller) > 0) %>% 
  mutate(frac_miller = sum(miller)/n(),
         loyal_miller = ifelse(frac_miller == 1, 1, 0)) %>%
  select(hh, frac_miller, loyal_miller) %>% 
  unique() %>% 
  ungroup() %>% 
  mutate(n_hh_miller = n()) %>%
  group_by(loyal_miller, n_hh_miller) %>% 
  summarise(n_obs = n()) %>% 
  ungroup() %>% 
  mutate(n_frac = n_obs/n_hh_miller )  # 0.6312989

Q2b_natural <- beer_markets %>%
  select(hh, natural) %>%
  arrange(hh, -natural) %>%
  group_by(hh) %>%
  filter(sum(natural) > 0) %>% 
  mutate(frac_natural = sum(natural)/n(),
         loyal_natural = ifelse(frac_natural == 1, 1, 0)) %>%
  select(hh, frac_natural, loyal_natural) %>% 
  unique() %>% 
  ungroup() %>% 
  mutate(n_hh_natural = n()) %>%
  group_by(loyal_natural, n_hh_natural) %>% 
  summarise(n_obs = n()) %>% 
  ungroup() %>% 
  mutate(n_frac = n_obs/n_hh_natural )  # 0.5096234

# Here I do not provide any comments on the result.

```

<br><br>

## Q2c

-   Calculate the number of beer transactions for each household.
-   Calculate the fraction of each beer brand for each household.

```{r, eval = T, echo = T, warning = F, message = F}
Q2c <- beer_markets %>% 
  count(hh, brand) %>% 
  group_by(hh) %>% 
  mutate(n_tot = sum(n)) %>% 
  arrange(hh, brand) %>% 
  mutate( prop = n / n_tot )

```
