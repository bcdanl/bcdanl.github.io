---
title: "DANL 210: Data Preparation and Management<br>Homework Assignment 3"
author: "Byeong-Hak Choe"
format: 
  html:
    code-fold: false
    code-summary: "Show the code"
    code-tools: true
execute:
  echo: true
  eval: false
  message: false
  warning: false
---

# Direction for Homework Assignment 3

- Go to the following IMDB website for 
  - Top Comedy Movies and TV Shows (sorted by popularity).
[https://www.imdb.com/search/title/?genres=comedy&explore=title_type,genres](https://www.imdb.com/search/title/?genres=comedy&explore=title_type,genres)
 

- Provide your Python Selenium codes to scrape the table for Top 200 Comedy Movies and TV Shows. 
  - You should create the following variables in the data frame:
    - `ranking`	
    - `title`	
    - `years`	
    - `certificate`	
    - `runtime`	
    - `genre`	
    - `rating`	
    - `metascore`	
    - `plot`	
    - `director_stars`	     
    - `votes`


- Save the data frame in the csv file.

## Setting working directory
```{python}
import os
wd_path = '/Users/byeong-hakchoe/Google Drive/suny-geneseo/spring2023/lecture_codes/'
os.chdir(wd_path)  
os.getcwd()
```


## Loading libraries
```{python}
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import time
import pandas as pd
import math
```

## Initiating the Chorme browser with the specified download folder
```{python}
options = Options()
options.add_argument("window-size=1400,1200")
driver = webdriver.Chrome(chrome_options = options, 
                          executable_path = 'chromedriver') ## the file of chromedriver is in the working directory.
                          
```

## Browser Size and Position
```{python}
driver.set_window_size(1300, 1800)
driver.set_window_position(1250, 0)
```


## Number of movie titles
```{python}
url = 'https://www.imdb.com/search/title/?genres=comedy&explore=title_type,genres'
driver.get(url)
time.sleep(4)
#body = driver.find_element_by_css_selector('body')
#body.send_keys(Keys.PAGE_DOWN)

n_title = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[1]/div[2]/span[1]')
n_title.location_once_scrolled_into_view

n_title = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[1]/div[2]/span[1]').text
n_title = n_title.split('of ')
n_title = n_title[1]
n_title = n_title.split(' titles')
n_title = n_title[0]
n_title = n_title.replace(',', '')
n_title = int(n_title)
n_step = math.floor(n_title / 50)

```


## For-loop to scrap data
```{python}
df = pd.DataFrame()
for k in range(0, 4):  # range(0, n_step) 
    #l = 1 + 50*k
    #driver.get("https://www.imdb.com/search/title/?genres=comedy&start="+str(l)+"&explore=title_type,genres&ref_=adv_nxt")
    for j in range(1, 51): #51
        ranking = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/h3/span[1]').text
        ranking = ranking.replace('.', '')
        ranking = int(ranking)
        ranking = pd.DataFrame([ranking]) 
        ranking.columns = ['ranking']   
        
        title = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/h3/a').text
        title = pd.DataFrame([title]) 
        title.columns = ['title']
        
        years = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/h3/span[2]').text
        years = years.replace('(', '')
        years = years.replace(')', '')
        years = pd.DataFrame([years]) 
        years.columns = ['years']

        certificate_runtime_genre = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/p[1]')
        
        try:
            certificate = certificate_runtime_genre.find_element(By.CLASS_NAME, 'certificate').text
            certificate = pd.DataFrame([certificate]) 
            certificate.columns = ['certificate']
        except:
            certificate = ''
            certificate = pd.DataFrame([certificate]) 
            certificate.columns = ['certificate']
            
        try:
            runtime = certificate_runtime_genre.find_element(By.CLASS_NAME, 'runtime').text
            runtime = runtime.replace(' min', '')
            runtime = int(runtime)
            runtime = pd.DataFrame([runtime]) 
            runtime.columns = ['runtime_minutes']
        except:
            runtime = ''
            runtime = pd.DataFrame([runtime]) 
            runtime.columns = ['runtime_minutes']
            
        try:
            genre = certificate_runtime_genre.find_element(By.CLASS_NAME, 'genre').text
            genre = pd.DataFrame([genre]) 
            genre.columns = ['genre']
        except:
            genre = ''
            genre = pd.DataFrame([genre]) 
            genre.columns = ['genre']
        
        try:
            rating = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/div/div[1]').text
            rating = float(rating)
            rating = pd.DataFrame([rating]) 
            rating.columns = ['rating']
        except:
            rating = ''
            rating = pd.DataFrame([rating]) 
            rating.columns = ['rating']

        try:
            metascore = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/div/div[3]/span').text
            metascore = int(metascore)
            metascore = pd.DataFrame([metascore]) 
            metascore.columns = ['metascore']
        except:
            metascore = ''
            metascore = pd.DataFrame([metascore]) 
            metascore.columns = ['metascore']
            
        try:        
            plot = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/p[2]').text
            plot = pd.DataFrame([plot]) 
            plot.columns = ['plot']
        except:
            plot = ''
            plot = pd.DataFrame([plot]) 
            plot.columns = ['plot']
        
        try:
            director_stars = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/p[3]').text
            director_stars = pd.DataFrame([director_stars]) 
            director_stars.columns = ['director_stars']
        except:
            director_stars = ''
            director_stars = pd.DataFrame([director_stars]) 
            director_stars.columns = ['director_stars']
            
        try:
            votes = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[3]/div/div['+str(j)+']/div[3]/p[4]/span[2]').text
            votes = votes.replace(',', '')
            votes = int(votes)
            votes = pd.DataFrame([votes]) 
            votes.columns = ['votes']
        except:
            votes = ''
            votes = pd.DataFrame([votes]) 
            votes.columns = ['votes']
            
        data = pd.concat([ranking, title, years, certificate, runtime, genre, 
                        rating, metascore, plot, director_stars, votes], axis=1) 
        df = df.append(data)

        
    try:
        if k == 0:
            next_field = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[4]/a')
        else:
            next_field = driver.find_element(By.XPATH, '//*[@id="main"]/div/div[4]/a[2]')
        next_field.click()
        time.sleep(5)
    except:
        pass
        
    df = df.fillna('')
            
df.to_csv("data/imdb_comedy_2023_0501.csv",
          index = False, encoding='utf-8-sig')  
```

