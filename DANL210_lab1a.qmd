---
title: "Python Lab 1 - Pandas Group Operations"
author: "Byeong-Hak Choe"
editor: visual
---

# Load Data

```{python}
import pandas as pd
df_ny = pd.read_csv('https://bcdanl.github.io/data/NY_pinc_pop.csv')
df_ny.head(10)
```

-   Variable Description
    -   `FIPS`: ID number for a county
    -   `pincp`: average personal income in a county `X` in year `Y`
    -   `pop_18_24`: population 18 to 24 years
    -   `pop_25_over`: population 25 years and over

# Q1a

-   Use `.sort_values()` to find the top 5 rich counties in NY for each year.
    -   Do not use `.apply()`.

```{python}
q1a = (
      df_ny
      .sort_values(by = 'pincp', ascending = False)
      .groupby('year').head(5)
      .sort_values( by = ['year', 'pincp'], ascending = [True, False] )
    )

q1a
```

# Q1b

-   Use `.rank()` to find the top 5 rich counties in NY for each year.
    -   Do not use `apply()`.

```{python}
q1b = (
   df_ny.assign( 
          ranking = df_ny.groupby('year')['pincp']
                         .rank(method = 'dense', ascending = False) 
                         )
)

q1b = (
  q1b.query('ranking <= 5')
  .sort_values(by = ['year', 'ranking'])
)

q1b
```

# Q1c

-   Use `apply()` with a `lambda` function and `.sort_values()` to find the top 5 rich counties in NY for each year.

```{python}
q1c = (
      df_ny
      .groupby('year')
      .apply( lambda x: x.sort_values(['pincp'], ascending = False )
      .head()
          )
    )

q1c
```

# Q1d

-   Write a function with `def` and `.sort_values()` that selects the top 5 `pincp` values.

-   Then, use the `def`ined function in `apply()` to find the top 5 rich counties in NY for each year.

```{python}
def top(df, n=5, column="pincp"):
    return df.sort_values(column, ascending=False)[:n]
  
q1d = df_ny.groupby('year').apply(top)
q1d
```

# cf) `SeriesGroupBy.nlargest()`

```{python}
q1abcd = df_ny.groupby('year')['pincp'].nlargest(5)

q1abcd
```

# Q1e

-   Visualize the yearly trend of the mean level of `pincp`.

```{python}
q1e = df_ny.groupby('year')['pincp'].mean()
q1e.plot()
```
