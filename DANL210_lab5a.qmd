---
title: "Python Lab 5 - Dates and Times"
author: "Byeong-Hak Choe"
---

## Load Libraries

```{python}
import pandas as pd
import numpy as np
import seaborn as sns
```

<br>

# Question 1


Consider the following example DataFrames.
```{python}
banks = pd.read_csv('https://bcdanl.github.io/data/bank_failures.csv', parse_dates=["Closing Date"])

```

<br>

## Q1a
Add the new variables, `closing_quarter` and `closing_year`, to the DataFrame `banks`.
  - `closing_quarter`:  the quarter in which the bank closed (`1`, `2`, `3`, or `4`)
  - `closing_year`:  the year in which the bank closed


<br>

```{python}
banks = banks.assign(
  closing_quarter = banks['Closing Date'].dt.quarter,
  closing_year = banks['Closing Date'].dt.year
)

banks
```


## Q1b
Count the number of banks that were closed for each pair of year-quarter.

```{python}
closing_year_q = (
  banks
  .groupby(['closing_year', 'closing_quarter'])['Bank Name']
  .agg(['size'])
)

closing_year_q
```


<br>

## Q1c
Provide both seaborn code and a simple comment to describe the quarterly trend of bank failure.

```{python}
closing_year_q.plot()
```

```{python}
closing_year_q = closing_year_q.reset_index()

closing_year_q['date_q'] = pd.to_datetime(
    closing_year_q['closing_year'].astype('str') + '-Q' + closing_year_q['closing_quarter'].astype('str')
    )

closing_year_q

sns.lineplot(data = closing_year_q,
             x = 'date_q',
             y = 'size')

```


<br><br><br>

# Question 2

Consider the following stock data:

```{python}
path = 'https://bcdanl.github.io/data/stocks2013_2023.csv'
stock = pd.read_csv(path)
```

<br>

## Q2a

Add a variable, `date_dt`, which is a `datetime` type of `Date` variable, to the `stock` DataFrame.

```{python}
stock['date_dt'] = pd.to_datetime(stock['Date'])
```

<br>

## Q2b

- For each year, find the two dates, for which 
  - `TSLA`'s `Close` was the highest of the year.
  - `TSLA`'s `Close` was the lowest of the year.
  


```{python}
TSLA = stock.query('company == "TSLA"')[['date_dt', 'Close']]

TSLA['year'] = TSLA['date_dt'].dt.year

TSLA['ranking'] = TSLA.groupby(['year'])['Close'].rank(method='dense', ascending=False)

TSLA['lowest'] = TSLA.groupby(['year'])['ranking'].transform('max')

q2b_h = TSLA.query('ranking == 1')
q2b_h

q2b_l = TSLA.query('ranking == lowest')
q2b_l
```



<br>

## Q2c
- Calculate the gap between the two adjacent dates with the highest `Close` of the year.

- Calculate the gap between the two adjacent dates with the lowest `Close` of the year.


```{python, warning = F, message = F}
q2b_h['date_lag'] = q2b_h['date_dt'].shift(1)
q2b_h['diff'] = q2b_h['date_dt'] - q2b_h['date_lag']
q2b_h
```

```{python, warning = F, message = F}
q2b_l['date_lag'] = q2b_l['date_dt'].shift(1)
q2b_l['diff'] = q2b_l['date_dt'] - q2b_l['date_lag']
q2b_l
```

