---
title: "Spring 2023, DANL 210: Data Preparation and Management"
subtitle: "Midterm Exam"
author: "Byeong-Hak Choe"
---

## Load Libraries

```{python}
import pandas as pd
import seaborn as sns
```

# Question 1
Load the DataFrame for Question 1.

```{python}
#| warning: false
#| message: false
nyc_pop = pd.read_csv('https://bcdanl.github.io/data/nyc_pop_by_boro_1950-2040.csv')
```

```{python}
#| warning: false
#| message: false
#| echo: false
nyc_pop 
```

<br>

## Q1a

Provide both pandas/seaborn code and a simple comment to describe the trend of population for each borough.

```{python}
nyc_pop.columns
nyc_pop_long = nyc_pop.melt(id_vars = 'Borough', var_name = 'Year', value_name = 'Pop')
```



```{python}
#| warning: false
#| message: false
#| echo: false


from IPython.display import display
display(nyc_pop_long)
```



```{python}
sns.lineplot(nyc_pop_long,
             x = 'Year',
             y = 'Pop',
             hue = 'Borough')
```

<br>

## Q1b

Provide both pandas/seaborn code and a simple comment to describe the trend of the proportion of population for each borough.

  - Note: The proportion of population for each borough is each borough's share of total population in NYC in each year.
  
```{python}
q1b = (
       nyc_pop_long
       .assign(tot = lambda x: x.groupby('Year')['Pop'].transform('sum'),
               prop = lambda x: 100 * x['Pop'] / x['tot'],
               chk = lambda x: x.groupby('Year')['prop'].transform('sum') )
       )
```


```{python}
#| warning: false
#| message: false
#| echo: false
display(q1b)
 
```

```{python}
sns.lineplot(q1b,
             x = 'Year',
             y = 'prop',
             hue = 'Borough')
```


<br><br>

# Question 2

## Load DataFrame for Q2a and Q2b

```{python}
restaurant = pd.read_csv('https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv')
```



```{python}
#| warning: false
#| message: false
#| echo: false

restaurant.to_html(max_rows = 10)
```


## Variable Description

-   `CAMIS`:
    -   This is an unique identifier for the entity (restaurant);
    -   10-digit integer
-   `DBA`:
    -   This field represents the name (doing business as) of the entity (restaurant);
    -   Public business name, may change at discretion of restaurant owner
-   `BORO`:
    -   Borough in which the entity (restaurant) is located.;
    -   • `1` = MANHATTAN
    -   • `2` = BRONX
    -   • `3` = BROOKLYN
    -   • `4` = QUEENS
    -   • `5` = STATEN ISLAND
    -   • `0` = Missing;
-   `CUISINE DESCRIPTION`:
    -   This field describes the entity (restaurant) cuisine.
-   `ACTION`:
    -   This field represents the actions that is associated with each restaurant inspection. ;
    -   • Violations were cited in the following area(s).
    -   • No violations were recorded at the time of this inspection.
    -   • Establishment re-opened by DOHMH
    -   • Establishment re-closed by DOHMH
    -   • Establishment Closed by DOHMH.
    -   • Violations were cited in the following area(s) and those requiring immediate action were addressed.
-   `VIOLATION CODE`:
    -   Violation code associated with an establishment (restaurant) inspection
-   `VIOLATION DESCRIPTION`:
    -   Violation description associated with an establishment (restaurant) inspection
-   `CRITICAL FLAG`:
    -   Indicator of critical violation;
    -   • `Critical`
    -   • `Not Critical`
    -   • `Not Applicable`;
    -   Critical violations are those most likely to contribute to food-borne illness
-   `SCORE`:
    -   Total score for a particular inspection;
-   `GRADE`:
    -   Grade associated with the inspection;
    -   • `N` = Not Yet Graded
    -   • `A` = Grade A
    -   • `B` = Grade B
    -   • `C` = Grade C
    -   • `Z` = Grade Pending
    -   • `P` = Grade Pending issued on re-opening following an initial inspection that resulted in a closure

<br>

## Q2a.

What are the mean, standard deviation, first quartile, median, third quartile, and maximum of `SCORE` for each `GRADE` of restaurants?

<br>

```{python}
q2a = restaurant.groupby('GRADE')['SCORE'].describe()
```

```{python}
#| warning: false
#| message: false
#| echo: false
display(q2a)
 
```



## Q2b.

Provide both (1) pandas/seaborn code and (2) a simple comment to describe how the distribution of `SCORE` varies by `CRITICAL FLAG` when `GRADE` is `A`.

```{python}
sns.displot(data = restaurant.query('GRADE == "A"'), x='SCORE', kind='kde', row='CRITICAL FLAG')
```


```{python}
sns.displot(data = restaurant.query('GRADE == "A"'), x='SCORE', row='CRITICAL FLAG')
```

-   For `Not Critical` type, the two `SCORE` values around 1 and 12 are most common, while 12 is the single most common `SCORE` value for `Critical` type.

<br>

## Q2c.

- For each pair of `BORO` and `GRADE`, calculate 
  - (1) the proportion of `Critical` violation and
  - (2) the proportion of `Not Critical` violation.
- Make a simple comment on how the proportions vary by `BORO` and `GRADE`.

<br>

- `.assign()` with `.transform()`
```{python}
q2c_ = (
        restaurant
        .groupby(['BORO', 'GRADE', 'CRITICAL FLAG'])
        .size()
        .reset_index(name='n')
        .assign(tot = lambda x: x.groupby(['BORO', 'GRADE'])['n'].transform('sum'),
                prop = lambda x: 100 * x['n'] / x['tot'])
)
```

- `.apply()` with `.assign()`
```{python}
q2c = (
       restaurant
       .groupby(['BORO', 'GRADE', 'CRITICAL FLAG'])
       .size()
       .reset_index(name='n')
       .groupby(['BORO', 'GRADE'])
       .apply(lambda x: x.assign( prop = 100 * x['n'] / x['n'].sum() ) )
       )
```


- `value_counts(normalize = True)` can be useful:
```{python}

q2c__ = (
  restaurant
  .groupby(['BORO', 'GRADE'])['CRITICAL FLAG']
  .value_counts(normalize = True)
)
```


```{python}
#| warning: false
#| message: false
#| echo: false
display(q2c)
```

- Visualization helps us see variations in data.
```{python}
(
 sns.FacetGrid(
       data = q2c,
       col='BORO',
       row = 'GRADE')
 .map(sns.scatterplot, 'CRITICAL FLAG', 'prop' )
 )

```

- `sns.barplot` would be better.
```{python}
(
 sns.FacetGrid(
       data = q2c,
       col='BORO',
       row = 'GRADE')
 .map(sns.barplot, 'CRITICAL FLAG', 'prop' )
 )

```

-   For `GRADE` `A`, the probability distribution of `CRITICAL FLAG` are similar across `BORO`s.

-   For `GRADE` `B`, the restaurants in `Staten Island` are more likely to be `Critical` than in other `BORO`s.

-   For `GRADE` `C`, the restaurants in `Bronx` are more likely to be `Critical` than in other `BORO`s.


<br>


## Q2d.

For the 10 most common `CUISINE DESCRIPTION` values, find the `CUISINE DESCRIPTION` value that has the highest proportion of `GRADE` `A`.

<br>

```{python}
q2d = (
       restaurant
       .groupby('CUISINE DESCRIPTION')
       .apply(lambda x: x.assign( n = x.shape[0] ) )
       .reset_index(drop = True)
       .query('n.rank(method="dense", ascending=False) <= 10')
       .groupby(['CUISINE DESCRIPTION', 'GRADE'])
       .size()
       .reset_index(name='n')
       .groupby('CUISINE DESCRIPTION')
       .apply(lambda x: x.assign( prop_A = x['n'] / x['n'].sum() ) )
       .query('GRADE == "A"')
       .sort_values(by = 'prop_A', ascending = False)
       .reset_index(drop = True)
       )

```

```{python}
#| warning: false
#| message: false
#| echo: false
display(q2d)
```

## Q2e.

-   Find the 3 most common names of restaurants (`DBA`) in each `BORO`.
    -   If the third most common `DBA` values are multiple, please include all the `DBA` values.
-   Overall, which `DBA` value is most common in NYC?

```{python}
q2e = (
       restaurant[['DBA', 'BORO']]
       .groupby(['BORO', 'DBA'])
       .size()
       .reset_index(name='n')
       )

q2e['ranking'] = q2e.groupby(['BORO'])['n'].rank(method='dense', ascending=False)

q2e = (
       q2e
       .query('ranking <= 3')
       .sort_values(by=['BORO', 'ranking'])
       .reset_index(drop = True)
       .drop_duplicates()
       )

q2e_ = (
       restaurant[['DBA']]
       .groupby(['DBA'])
       .value_counts()
       .sort_values(ascending = False)
)

```

```{python}
#| warning: false
#| message: false
#| echo: false
display(q2e)
display(q2e_)
```


-   Note that `chipotle mexican grill` and `subway` are both the third most popular franchise/chain in `Manhattan`.

-   Overall, `dunkin` is the most popular franchise/chain in NYC.



<br>


## Q2f.

For all the `DBA` values that appear in the result of Q2f, find the `DBA` value that is most likely to commit critical violation.

```{python}

q2f_ = (
        restaurant
        .loc[(restaurant['DBA'].isin(q2e['DBA'])) & (restaurant['CRITICAL FLAG'] == 'Critical'), ['DBA']]
        .groupby('DBA')
        .size()
        .reset_index(name='n_crit') 
        )

q2f__ = (
        restaurant
        .loc[(restaurant['DBA'].isin(q2e['DBA'])) & (restaurant['CRITICAL FLAG'] != 'Critical'), ['DBA']]
        .groupby('DBA')
        .size()
        .reset_index(name='n_not_crit') 
        )


q2f__['n_crit'] = q2f_['n_crit']

q2f__['prop'] = q2f__['n_crit'] / (q2f__['n_crit'] + q2f__['n_not_crit'])

q2f__ = q2f__.sort_values('prop', ascending=False)
```

- `.shift(1)` can be useful:

```{python}
q2f = (
       restaurant[restaurant['DBA'].isin(q2e['DBA'])]
           .groupby(['DBA', 'CRITICAL FLAG'])
           .size()
           .reset_index(name='n')
           .groupby('DBA')
           .apply(lambda x: x.assign(lag_n=x['n'].shift(1),
                                      tot=x['n'].sum(),
                                      prop_crit=x['n'].shift(1)/x['n'].sum()))
           .reset_index()
           .loc[:, ['DBA', 'prop_crit']]
           .sort_values(by='prop_crit', ascending=False)
           .dropna(subset=['prop_crit'])
       )
```

```{python}
#| warning: false
#| message: false
#| echo: false
display(q2f)
```

-   Among popular franchises/chains, `subway` is most likely to commit `Critical` violation in NYC.
