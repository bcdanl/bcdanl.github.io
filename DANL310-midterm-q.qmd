---
title: "DANL 310: Data Visualization and Presentation\nMidterm Exam"
author: "Byeong-Hak Choe"
---

```{r setup, include = FALSE}
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggthemes)
library(ggtech)
library(ggthemr)
library(ggthemes)
library(hrbrthemes)
library(hexbin)
library(ggforce)
library(skimr)

knitr::opts_chunk$set(fig.width=8, fig.height=5,
                      echo = T, eval = T, warning = F, message = F)  

theme_set(theme_ipsum() +
          theme(strip.background =element_rect(fill="lightgray")))
```

### Loading R packages

```{r, eval = T, echo = T}
library(tidyverse)
library(socviz)
library(lubridate)
library(geofacet)
```

# Question 1

The following data is for Question 1:

```{r}
library(gapminder)
gapminder <- gapminder
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(gapminder) 
```

<br><br>

1. Replicate the following ggplot.
2. Interpret the visualization result.

```{r}
ggplot(data = filter(gapminder, year == 2007),
       aes(x = lifeExp,
           y = fct_reorder(country, lifeExp))) +
  geom_point(color = "#0072B2", size = 1.75) +
  facet_wrap(.~continent, scales = "free_y") +
  scale_x_continuous(
    name = "Life expectancy in 2007"
  ) +
  scale_y_discrete(name = NULL) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = rel(.75))
  )
```


# Question 2

The following data is for Question 2:

```{r}
n_tweets_long <- read_csv(
  'https://bcdanl.github.io/data/n_tweets_long.csv')

```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(n_tweets_long) 
```

<br><br>

- Replicate the following ggplot.

```{r, echo = F}
n_tweets_long1 <- n_tweets_long %>% 
  filter(type %in% c("n_ot_us", "n_ot_wrld") ) %>% 
  mutate(type = ifelse(type == "n_ot_us", "US", "Worldwide"))

n_tweets_long2 <- n_tweets_long %>% 
  filter(type %in% c("n_rt_lk_us", "n_rt_lk_wrld") ) %>% 
  mutate(type = ifelse(type == "n_rt_lk_us", "US", "Worldwide"))
  

p2 <- ggplot(mapping = aes(x = year, y = n)) +
  geom_col(n_tweets_long1,
           mapping = aes(fill = type), 
           position = 'dodge', alpha = .67) + 
  geom_line(n_tweets_long2, 
            mapping = aes(color = type),
            size = 1.5) + 
  geom_point(data = n_tweets_long2, 
             size = 2,
             color = 'black')  +
  scale_x_continuous(breaks = seq(2012, 2017, 1)) +
  scale_y_continuous(label = scales::comma) +
  scale_color_manual(values = c('maroon', '#428bca')) +
  scale_fill_manual(values = c('maroon', '#428bca')) +  
  guides(fill = guide_legend(reverse = TRUE,
                             # title.position = "top",
                             label.position = "bottom",
                             keywidth = 2,
                             nrow = 1,
                             order = 1),
         color = guide_legend(reverse = TRUE,
                             # title.position = "top",
                             label.position = "bottom",
                             keywidth = 2,
                             nrow = 1,
                             order = 2)) +
  labs(x = "Year", 
       y = "Number of Tweets, Retweets & Likes (in thousand)",
       fill = "Tweets",
       color = "Retweets and likes",
       caption = 'Source: Choe, "Social Media Campaigns, Lobbying, and Climate Change Legislation: Evidence from #climatechange/#globalwarming and Energy Lobbies" (2023)') + 
  theme_ipsum() +
  theme(axis.title.y = element_text(size = rel(2),
                                    margin = margin(t = 0, r = 20, b = 0, l = 0)),
        axis.title.x = element_text(size = rel(2),
                                    margin = margin(t = 10, r = 0, b = 0, l = 0)),
    axis.text.x = element_text(size = rel(1.75)),
    axis.text.y = element_text(size = rel(1.75)),
    legend.position = 'top',
    legend.title = element_text(size= rel(1.75),
                                face = 'bold',
                                hjust = .5),    
    legend.text = element_text(size= rel(1.5)),
    legend.spacing.x = unit(1.25, "cm"),
    plot.caption = element_text(size = rel(1.25),
                                hjust = .5)
    ) 

p2
```

<br><br>

# Question 2 - Bar Charts 2

The following data is for Question 2:

```{r, echo = T, eval = T, message=F}
nyc_flights <- read_csv(
  'https://bcdanl.github.io/data/nyc_flights_grouped.csv')

```

```{r, result = 'asis', echo = F, message = F, warning = F}
rmarkdown::paged_table(nyc_flights) 
```


- Replicate the following ggplot.

```{r, echo = F, eval = T}

nyc_flights %>%
  group_by(carrier_full) %>%
  tally() %>%
  mutate(highlight = ifelse(carrier_full %in% c("Delta", "American"), "yes", "no")) %>%
  ggplot(aes(x=reorder(carrier_full, n),
             y=n,
             fill = highlight)) +
  scale_fill_manual(values = c("#B0B0B0D0", "#BD3828D0"),
                    guide = "none") +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_discrete(name = NULL) +
  geom_col() +
  geom_text(aes(label = n), hjust = -.1, vjust = -.5,
            size = 4) +
  coord_flip(clip = "off") +
  theme_wsj() +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  ylim(c(0, 60000)) +
  labs( caption = "Sources: U.S. Department of Transportation,\nBureau of Transportation Statistics",
        y = "Number of flights",
        title = "Number of flights from NYC",
        subtitle = "Year 2013")
```

<br><br>

# Question 3 - Stocks

The following data is for Question 3:

```{r}
stock = read_csv('https://bcdanl.github.io/data/stocks2013_2023.csv')
```

```{r, result = 'asis', echo = F, message = F, warning = F}
rmarkdown::paged_table(stock) 
```



- Replicate the following ggplot.

  - For each company, the normalized close price on each date is the company's close price on each date divided by the company's close price on the first date (2013-01-02).

$$
\text{(Normalized Close Price)}_{\,\text{company},\,\text{date}}\,=\,\frac{\text{Close}_{\,\text{company},\,\text{date} }}{\text{Close}_{\,\text{company},\,\text{2013-01-02} }}
$$

  - The normalized closing price on the first date (2013-01-02) is `1` for each company.
  
  - `y`-axis represents the log of the normalized closing price.
  
```{r, echo = F}
library(lubridate)
q3 <- stock %>% 
  group_by(company) %>% 
  mutate(normal_close =  1 * Close / first(Close) )

p <- ggplot(q3, aes(x = Date, y = log(normal_close), color = company))

p + 
  geom_line() +
  geom_hline(yintercept = 0, color = 'red', lty = 2) +
  scale_x_date(breaks = seq(as.Date(min(q3$Date)), as.Date(max(q3$Date)), by = "year")
) +
  ylim(c(min(log(q3$normal_close)), max(log(q3$normal_close)))) +
  labs(y = 'Normalized Closing Price (in log)') +
  theme(axis.text.x = element_text(angle = 45))
```
