---
title: Lecture 5
subtitle: RStudio; R Basics
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-09-06
execute: 
  eval: true
  echo: false
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```


# Setting the DANL Tools {background-color="#1c4982"}


## Setting the Tools
### Posit Cloud

- [Posit Cloud](https://posit.cloud) (formerly RStudio Cloud) is a web service that delivers a browser-based experience similar to RStudio, the standard IDE for the R language.

- For our course, we use [Posit Cloud](https://posit.cloud) for the R programming component.
  - If you want to install R and RStudio on your laptop, you use my office hours.


## Setting the Tools
### RStudio Environment

:::: {.columns}
::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>


:::

::: {.column width="50%"}

- **Script Pane** is where you write R commands in a script file that you can save. 
  - An R script is simply a text file containing R commands. 
  - RStudio will color-code different elements of your code to make it easier to read.

:::
::::

## Setting the Tools
### RStudio Environment

:::: {.columns}
::: {.column width="50%"}
<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>

:::

::: {.column width="50%"}

- **Console Pane** allows you to interact directly with the R interpreter and type commands where R will immediately execute them.

:::
::::

## Setting the Tools
### RStudio Environment

:::: {.columns}
::: {.column width="50%"}
<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>
:::

::: {.column width="50%"}

- **Environment Pane** is where you can see the values of variables, data frames, and other objects that are currently stored in memory.

- Type `a <- 1` in Console, and then hit **Enter**.

:::
::::

## Setting the Tools
### RStudio Environment
:::: {.columns}
::: {.column width="50%"}
<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>

:::

::: {.column width="50%"}
- **Plots Pane** contains any graphics that you generate from your R code.

:::
::::


## Setting the Tools
### R Packages and `tidyverse`

- **R packages** are collections of R functions, compiled code, and data that are combined in a structured format.

- Several R packages come with numerous pre-built functions that can perform a wide range of data analysis tasks.



## Setting the Tools
### `tidyverse`


:::: {.columns}
::: {.column width="50%"}

- The `tidyverse` is a collection of R packages designed for data science that share an underlying design philosophy, grammar, and data structures. 


:::{.incremental}

- `tidyverse` includes a lot of R packages, including `ggplot2`, `dplyr`, and `tidyr`.
  
- The `tidyverse` packages work harmoniously together to make data manipulation, exploration, and visualization more.

:::
:::

::: {.column width="50%"}

![](https://bcdanl.github.io/lec_figs/ggplot2-part-of-tidyverse.png){width="80%"}
:::
::::

## Setting the Tools
### Installing R packages with `install.packages("packageName")`

```{.r}
install.packages("tidyverse")
```

- R packages can be easily installed from within R using a base-R function `install.packages("packageName")`. 
  - To install the R package `tidyverse`, type and run the following command from R console:


- While running the above codes, you may encounter the pop-up question, and you can answer "No"




## Setting the Tools
### Loading R packages with `library(packageName)`

```{.r}
library(tidyverse)
mpg
```

- Once installed, a package is loaded into an R session using a base-R function `library(packageName)` so that R package's functions and data can be used.
  - To load the R package `tidyverse`, type and run the following commands from a R script:


- `mpg` is the data.frame provided by the R package `ggplot2`, one of the R pakcages in `tidyverse`.
  - Since `tidyverse` is installed, `ggplot2` package is already installed.





## Setting the Tools
### RStudio Options Setting

:::: {.columns}
::: {.column width="50%"}
![](https://bcdanl.github.io/lec_figs/RStudio_options.png)
:::

::: {.column width="50%"}
- This option menu is found by menus as follows:
  - **Tools** $>$ **Global Options**

- Check the boxes as in the left.
- Choose the option __*Never*__ for <u> Save workspace to .RData on exit: </u>
:::

::::





## Setting the Tools
### Workflow: Naming and File Management

- Save your class R script for each class.
- I use the following style of file name for class R script:
  - e.g., `danl-101-lec-04-2024-0905.R`

- Do not have any space when you name a file.
  - It is recommended to use all lower cases.


## Setting the Tools
### Workflow: Code and comment style
- The two main principles for coding and managing data are:
  - Make things easier for your future self.
  - Don't trust your future self.


- The `#` mark is R's comment character.
  - In R scripts (`*.R` files), `#` indicates that the rest of the line is to be ignored.
  - Write comments before the line that you want the comment to apply to.



## Setting the DANL Tools
### Workflow: Shortcuts in Posit Cloud (RStudio)

:::: {.nonincremental}
:::: {.columns}
::: {.column width="50%"}
- **Windows**
  - **Alt + -** adds an assignment operator
  - **Ctrl + Enter** runs a current line of code
  - **Ctrl + Shift + C** makes a comment (#)
  - **Ctrl + Shift + R** makes a section (# Section - - - -)
  
::: 

::: {.column width="50%"}
- **Mac**
  - **option + -** adds an assignment operator
  - **command + return** runs a current line of code
  - **command + shift + C** makes a comment (#)
  - **command + shift + R** makes a section (# Section - - - -)

::: 
::::
::::


## Setting the Tools
### Workflow: Shortcuts in Posit Cloud (RStudio)

- **Ctrl** (**command** for Mac Users) **+ Z** undoes the previous action.
- **Ctrl** (**command** for Mac Users) **+ Shift + Z** redoes when undo is executed.


## Setting the Tools
### Workflow: Shortcuts in Posit Cloud (RStudio)

- **Ctrl** (**command** for Mac Users) **+ F** is useful when finding a phrase (and replace the phrase) in the RScript.




## Setting the Tools
### Workflow: Auto-completion
:::: {.columns}
::: {.column width="50%"}
```{.r}
libr
```
:::

::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/auto-completionRStudio.png">
</p>

:::

::::


- Auto-completion of command is useful.
  - Type `libr` in the RScript in RStudio and wait for a second.



## Setting the Tools
### Workflow: STOP icon


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/console-running.png">
</p>


- When the code is running, RStudio shows the STOP icon ( ðŸ›‘ ) at the top right corner in the Console Pane.
  - Do not click it unless if you want to stop running the code.
  

    

# R Basics  {background-color="#1c4982"}

    
## R Basics
###  Values, Variables, and Types

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/py-basic-box.png">
</p>

- A **value** is datum (literal) such as a number or text. 

- There are different types of values: 
  - 352.3 is known as a float or double;
  - 22 is an integer;
  - "Hello World!" is a string.


## R Basics
###  Values, Variables, and Types

```{.r}
a <- 10    # The most popular assignment operator in R is `<-`.
a
```


:::: {.columns}

::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/int-py-fig2-3.png" width="400">
</p>

:::

::: {.column width="50%"}


- A **variable** is a name that refers to a value.
  - We can think of a **variable** as a box that has a value, or multiple values, packed inside it.
  
- A **variable** is just a name!

:::

::::


## R Basics
###  Objects

- Sometimes you will hear variables referred to as **objects**.

- Everything that is not a *literal value*, such as `10`, is an **object**. 



## R Basics
### Assignment

```{.r}
x <- 2
x < - 3
```

- What is going on here?

- The shortcut for the assignment `<-` is:
  - Windows: **Alt + -** 
  - Mac: **option + -** 
    

## R Basics
###  Assignment

```{.r}
x <- 2
y <- x + 12
```

- In programming code, everything on the right side needs to have a value.
  - The right side can be a literal value, or a variable that has already been assigned a value, or a combination.
  
- When R reads `y <- x + 12`, it does the following:
  1. Sees the `<-` in the middle.
  2. Knows that this is an assignment.
  3. Calculates the right side (gets the value of the object referred to by `x` and adds it to `12`).
  4. Assigns the result to the left-side variable, `y`.





## R Basics
### Data Types

:::: {.columns}
::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r_variable_types.png">
</p>

:::

::: {.column width="50%"}
- **Logical**: `TRUE` or `FALSE`.
- **Numeric**: Numbers with decimals
- **Integer**: Integers
- **Character**: Text strings
- **Factor**: Categorical values. 
  - Each possible value of a factor is known as a *level*.

:::
::::


## R Basics
### Data Containers

:::: {.columns}
::: {.column width="50%"}

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/r_data_types.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

:::

::: {.column width="50%"}
- **vector**:	1D collection of variables of the *same* type
- **data.frame**:	2D collection of variables of *multiple* types
  - A data.frame is a collection of vectors.

:::

::::




## R Basics
###  Data Types

:::: {.columns}
::: {.column width="50%"}
```{.r}
orig_number <- 4.39898498
class(orig_number)
mod_number <- as.integer(orig_number)
class(mod_number)
```
:::

::: {.column width="50%"}

```{.r}
# TRUE converts to 1; FALSE does to 0.
as.numeric(TRUE)
as.numeric(FALSE)
```
:::
::::


- Sometimes we need to explicitly cast a value from one type to another. 

  - We can do this using built-in functions like `as.character()`, `as.integer()`, `as.numeric()`, and `as.factor()`.



## R Basics
### Data Types


::: {.panel-tabset}

## Character

```{.r}
myname <- "my_name"
class(myname) # returns the data **type** of an object.
```


- Strings are known as `character` in R. 
- Use the double quotes (`"`) or single quotes (`'`) to wrap around the string
  - Most IDE, including RStudio, automatically provides a pair of quotes when typing just one quote.




## Numbers

```{.r}
favorite.integer <- as.integer(2)
class(favorite.integer)

favorite.numeric <- as.numeric(8.8)
class(favorite.numeric)
```


- Numbers have different classes. 
  - The most common two are integer and numeric. Integers are whole numbers.


## Logical (`TRUE`/`FALSE`)

```{.r}
class(TRUE)
class(FALSE)
favorite.numeric == 8.8
favorite.numeric == 9.9
class(favorite.numeric == 8.8)
```

- We use the `==` to test for equality in R



## Vectors


```{.r}
a <- 1:10  # colon operator
b <- c("3", 4, 5)
beers <- c("BUD LIGHT", "BUSCH LIGHT", "COORS LIGHT", 
           "MILLER LITE", "NATURAL LIGHT")
class(a)
class(b)
class(beers)
```


- We can create one-dimensional data structures called "vectors".

- `c(...)`: Returns a vector that is constructed from one or more arguments, with the order of the vector elements corresponding to the order of the arguments.


## Factors

```{.r}
beers <- as.factor(beers)
class(beers)

levels(beers)
nlevels(beers)
```


- Factors store categorical data. 

- Under the hood, factors are actually integers that have a string label attached to each unique integer. 
  - For example, if we have a long list of `Male`/`Female` labels for each of our patients, this will be stored a "column" of zeros and ones by R.


:::





## R Basics
### Workflow: Quotation marks, parentheses, and `+`

```{.r}
x <- "hello
```


- Quotation marks and parentheses must always come in a pair.
  - If not, Console Pane will show you the continuation character `+`:
  
- The `+` tells you that R is waiting for more input; it doesnâ€™t think youâ€™re done yet. 





## R Basics
### Functions

- A function can take any number and type of input *parameters* and **return** any number and type of output *results*.

- R ships a vast number of built-in functions. 

- R also allows a user to define a new function.

- We will mostly use built-in functions.



## R Basics
### Functions, Arguments, and Parameters

```{.r}
library(tidyverse)

# The function `str_c()`, provided by `tidyverse`, concatenates characters.
str_c("Data", "Analytics")
str_c("Data", "Analytics", sep = "!")
```


- We invoke a function by entering its name and a pair of opening and closing parentheses. 

- Much as a cooking recipe can accept ingredients, a function invocation can accept inputs called **arguments**. 

- We pass arguments sequentially inside the parentheses (, separated by commas).

- A **parameter** is a name given to an expected function argument.

- A *default argument* is a fallback value that R passes to a parameter if the function invocation does not explicitly provide one.



## R Basics
### Arithmetic Operations and Mathematical Functions

::: {.panel-tabset}

## Algebra

:::: {.columns}
::: {.column width="50%"}
```{.r}
5 + 3
5 - 3
5 * 3
5 / 3
5^3
```
:::

::: {.column width="50%"}
```{.r}
( 3 + 4 )^2
3 + 4^2
3 + 2 * 4^2
3 + 2 * 4 + 2
(3 + 2) * (4 + 2)
```
:::

::::

- All of the basic operators with parentheses we see in mathematics are available to use.

- R can be used for a wide range of mathematical calculations.


## Math functions



:::: {.columns}

::: {.column width="50%"}
```{.r}
5 * abs(-3)
sqrt(17) / 2
exp(3)
log(3)
log(exp(3))
exp(log(3))
```

- R has many built-in mathematical functions that facilitate calculations and data analysis.

:::


::: {.column width="50%"}
- `abs(x)`: the absolute value $|x|$ 
- `sqrt(x)`: the square root $\sqrt{x}$
- `exp(x)`: the exponential value $e^x$, where $e = 2.718...$
- `log(x)`: the natural logarithm $\log_{e}(x)$, or simply $\log(x)$

:::

::::



:::




## R Basics
### Vectorized Operations

```{.r}
a <- c(1, 2, 3, 4, 5)
b <- c(5, 4, 3, 2, 1)

a + b
a - b
a * b
a / b
sqrt(a)
```

- Vectorized operations mean applying a function to every element of a vector without explicitly writing a loop. 
  - This is possible because most functions in R are vectorized, meaning they are designed to operate on vectors element-wise.
  - Vectorized operations are a powerful feature of R, enabling efficient and concise code for data analysis and manipulation.




## Measures of Central Tendency
### Mean

$$
\overline{x} = \frac{x_{1} + x_{2} + \cdots + x_{N}}{N}
$$

- The **arithmetic mean** (or simply *mean* or *average*) is the sum of all the values divided by the number of observations in the data set.
  - `mean()` calculates the mean of the values in a vector.
  - For a given vector $x$, if we happen to have $N$ observations $(x_{1}, x_{2}, \cdots , x_{N})$, we can write the arithmetic mean of the data sample as follows:
  

## Measures of Central Tendency
### Median

```{.r}
x <- c(1, 2, 3, 4, 5)

sum(x)
mean(x)
median(x)
```

- The **median** is the measure of center value in a given vector.
  - `median()` calculates the **median** of the values in a vector.

- In contrary to the mean, the median is not affected by outliers or skewed data.


## Measures of Dispersion

- Measures of **dispersion** are used to describe the degree of variation in a given vector.

- They are a representation of the numerical spread of a given data set. 

- To describe this dispersion, a number of statistical measures are developed
  - Range
  - Variance
  - Standard deviation
  - Quartile

## Measures of Dispersion
### Range

$$
(\text{range of x}) \,=\, (\text{maximum value in x}) \,-\, (\text{minimum value in x})
$$
- The **range** is the difference between the largest and the smallest values in a given vector. 
  - `max(x)` returns the maximum value of the values in a given vector $x$.
  - `min(x)` returns the minimum value of the values in a given vector $x$.



## Measures of Dispersion
### Variance
$$
\overline{s}^{2} = \frac{(x_{1}-\overline{x})^{2} + (x_{2}-\overline{x})^{2} + \cdots + (x_{N}-\overline{x})^{2}}{N-1}\;\, 
$$

- The **variance** is used to calculate the deviation of all data points in a given vector from the mean. 
  - The larger the variance, the more the data are spread out from the mean and the more variability one can observe in the data sample. 
  - To prevent the offsetting of negative and positive differences, the variance takes into account the square of the distances from the mean. 
- `var(x)` calculates the variance of the values in a vector $x$. 


## Measures of Dispersion
### Standard Deviation
$$
\overline{s} = \sqrt{ \left( \frac{(x_{1}-\overline{x})^{2} + (x_{2}-\overline{x})^{2} + \cdots + (x_{N}-\overline{x})^{2}}{N-1}\;\, \right) }
$$

- The **standard deviation** (SD) is also a measure of the spread of values within a given vector.
  - SD is simply the square root of the variance.
  - `sd(x)` calculates the standard deviation  of the values in a vector $x$
  - SD helps us understand how representative the mean is of the data. 
  - A low SD suggests that the mean is a good summary, while a high SD suggests greater variability around the mean.
  
  

## Measures of Dispersion
### Quartiles and Interquartile Range

- A **quartile** is a quarter of the number of data points in a given vector. 
  - Quartiles are determined by first sorting the values and then splitting the sorted values into four disjoint smaller data sets. 
  - Quartiles are a useful measure of dispersion because they are much less affected by outliers or a skewness in the data set than the equivalent measures in the whole data set. 
  
- An **interquartile range** describes the difference between the third quartile (Q3) and the first quartile (Q1), telling us about the range of the middle half of the scores in the distribution.
  - The quartile-driven descriptive measures (both centrality and dispersion) are best explained with a popular plot called a **box plot**.


## Measures of Dispersion
:::: {.columns}
::: {.column width="50%"}
```{.r}
x <- c(1, 2, 3, 4, 5)

var(x)
sd(x)
```
:::

::: {.column width="50%"}

```{.r}
quantile(x)
quantile(x, 0) # minimum
quantile(x, 0.25) # the first quartile
quantile(x, 0.5) # the second quartile
quantile(x, 0.75) # the third quartile
quantile(x, 1) # maximum
```
:::
::::



## R Basics
### Absolute vs. Relative Pathnames

::: {.panel-tabset}

## Absolute Path

- Complete path from the root directory to the target file or directory.
- Independent of the current working directory.

- Example (Mac): `/Users/user/documents/data/car_data.csv`
- Example (Windows): `C:\\Users\\user\\Documents\\data\\car_data.csv`


## Relative Path

- Path relative to the current working directory.
- Changes based on the current directory.
<!-- - Uses '.' for current directory and '..' for parent directory. -->
- Example: If the current directory is `/Users/user`, the relative path to `car_data.csv` would be `documents/dada/car_data.csv`
- For the Posit Cloud project, we can use a relative path.

:::


## R Basics
### Working with Data from Files


:::{.nonincremental}
- We use the `read_csv()` function to read a comma-separated values (CSV) file.

1. Download the CSV file, `car_data.csv` from the Class Files module in our Brightspace.

2. Find the path name for the file, `car_data.csv` from the File Explorer / Finder.

3. Provide the path name for the file, `car_data.csv`, to the `read_csv()` function.

```{.r}
uciCar <- read_csv('HERE WE PROVIDE A PATHNAME FOR car_data.csv')
View(uciCar)
```

- `View()`/`view()` displays the data in a simple spreadsheet-like grid viewer.
  - We can click the data.frame object, displayed in the Environment Pane.

:::



## R Basics
### Examining data.frames


:::: {.columns}
::: {.column width="50%"}
```{.r}
class(uciCar)
dim(uciCar)
nrow(uciCar)
ncol(uciCar)
```
:::

::: {.column width="50%"}
```{.r}
library(skimr)
skim(uciCar)
```
:::

::::

- `dim()` shows how many rows and columns are in the data for `data.frame`.
- `nrow()` and `ncol()` shows the number of rows and columns for `data.frame` respectively.
- `skimr::skim()` provides a more detailed summary.
  - `skimr` is the R package that provides the function `skim()`.



## R Basics
### Reading data.frames from an URL


```{.r}
tvshows <- read_csv(
		'https://bcdanl.github.io/data/tvshows.csv')
```

- We can import the CSV file from the web.


## R Basics
### Tidy `data.frame`: Variables, Observations, and Values


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/tidy-1.png">
</p>


- There are three rules which make a `data.frame` tidy:

  1. Each **variable** must have its own *column*.
  2. Each **observation** must have its own *row*.
  3. Each **value** must have its own *cell*.



<!-- # Estimating the Price Elasticity of Orange Juice {background-color="#1c4982"} -->


<!-- ## Data Science Workflow -->
<!-- ### The Lifecycle of a Data Science Project -->

<!-- <div style="text-align: center; width: 100%; margin: auto;"> -->
<!--   <img src="https://bcdanl.github.io/lec_figs/r4ds-fig1-1-whole-game.png" style="width: 45%; margin-bottom: -20px;"> -->
<!--   <p style="font-weight: bold;"></p> -->
<!-- </div> -->


<!-- ::: {.nonincremental} -->
<!-- - With the example of estimating the *price elasticity* of orange juice (OJ), this section rapidly overviews the main tools of data science:  -->
<!--   - Importing, tidying, transforming, and visualizing data, as well as ML modeling. -->
<!--   - Note: Price elasticity of demand is a measure of how *sensitive* the quantity demanded of a good or service is to a change in its price. -->

<!-- $$ -->
<!-- (\text{Price Elasticity of Demand}) = \frac{(\text{% Change in Quantity Demanded})}{(\text{% Change in Price})} -->
<!-- $$ -->

:::


<!-- ## Price Elasticity of Orange Juice in Dominick's Supermarket -->

<!-- ::::{.columns} -->

<!-- ::: {.column width="40%"} -->
<!-- <!-- <div style="text-align: center; width: 100%; margin: auto;"> --> -->
<!-- <!--   <img src="https://bcdanl.github.io/lec_figs/dominicks.jpeg" style="width: 100%; margin-bottom: -20px;"> --> -->
<!-- <!--   <p style="font-weight: bold;"></p> --> -->
<!-- <!-- </div> --> -->
<!-- <div style="text-align: center; width: 100%; margin: auto;"> -->
<!--   <img src="https://bcdanl.github.io/lec_figs/oj-tropicana-mm.png" style="width: 100%; margin-bottom: -20px;"> -->
<!--   <p style="font-weight: bold;"></p> -->
<!-- </div> -->

<!-- ::: -->

<!-- :::{.column width="60%"} -->

<!-- - To estimate the price elasticity of OJ, we will use sales data for OJ from Dominickâ€™s grocery stores in the 1990s. -->
<!--   - Weekly `price` and `sales` (in number of cartons "sold") for three OJ brands---Tropicana, Minute Maid, Dominick's. -->
<!--   - A dummy, `ad`, showing whether each `brand` was advertised (in store or flyer) that week. -->

<!-- ::: -->

<!-- :::: -->


<!-- ## Price Elasticity of Orange Juice in Dominick's Supermarket -->
<!-- ### Descriptive Statitstics -->




