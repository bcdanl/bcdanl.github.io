---
title: Lecture 15
subtitle: Data Preparation and Management with `R`
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-10-04
execute: 
  eval: true
  echo: false
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```



# Data Transformation with R `tidyverse` {background-color="#1c4982"}


## Data Transformation
<!-- ### `dplyr` basics -->

- `DATA.FRAME |> filter(LOGICAL_CONDITIONS)`
- `DATA.FRAME |> arrange(VARIABLES)`
- `DATA.FRAME |> distinct(VARIABLES)`
- `DATA.FRAME |> select(VARIABLES)`
- `DATA.FRAME |> rename(NEW_VARIABLE = EXISTING_VARIABLE)`

- The subsequent arguments describe what to do with the data.frame, mostly using the variable names.
- The result is a **data.frame**.



# Filter observations with `filter()` {background-color="#1c4982"}

## Filter observations with `filter()`
### Missing values (`NA`)

:::{.nonincremental}
- Almost any operation involving an unknown value (`NA`) will also be unknown.


```{.r}
NA > 5
10 == NA
NA + 10
NA / 2
(1 + 2 + NA) / 3
```
:::


## Filter observations with `filter()`
### Missing values (`NA`)

:::{.nonincremental}

- Let `x` be Mary's age. We don't know how old she is.
- Let `y` be John's age. We don't know how old he is.
- Are John and Mary the same age?

:::
```{.r}
x <- NA
y <- NA
x == y
```


## Filter observations with `filter()`
### `is.na()`
:::{.nonincremental}

- If we want to determine if a value is missing, use `is.na()`.
- If we want to preserve missing values, ask `filter()` for them explicitly.

:::

:::: {.columns}
::: {.column width="50%"}
```{.r}
x <- NA
is.na(x) # is x NA?

y <- "missing"
is.na(y) # is y NA?
```
:::

::: {.column width="50%"}
```{.r}
df <- data.frame(y = c(1, NA, 3))

df |> 
  filter(y > 1)

df |> 
  filter( is.na(y) | y > 1 )
```
:::

::::

# Find all unique observations with `distinct()` {background-color="#1c4982"}

## Find all unique observations with `distinct()`



:::: {.columns}
::: {.column width="50%"}
```{.r}
df <- data.frame(
  v1 = c("USA", "Korea", "USA"),
  v2 = c("D.C.", "Seoul", "D.C.") 
  v3 = c("Georgetown", "Gangnam", 
                       "Georgetown") 
  )

# Remove duplicate observations
df |> 
  distinct()
```
:::

::: {.column width="50%"}
```{.r}
# Remove duplicate observations, 
# if any

flights |> 
  distinct()
```
:::
::::

- `distinct()` can find all the unique observations in a data.frame. 


## Find all unique observations with `distinct()`

```{.r}
# Find all unique 
#  origin and destination pairs
flights |> 
  distinct(origin, dest)
```


- We can also provide variable names to `distinct()`.
  


# Arrange observations with `arrange()` {background-color="#1c4982"}


## Arrange observations with `arrange()`

<!-- - The `==` is an operator that compares the objects on either side and returns `TRUE` if they have the same values. -->

:::: {.columns}

::: {.column width="52%"}

```{.r}
df <- data.frame(
  year = c(2024, 2021, 2024, 2024),
  month = c(7, 10, 7, 4),
  day = c(20, 19, 15, 9)
)
```


```{r}
#| echo: false
df <- data.frame(
  year = c(2024, 2021, 2024, 2024),
  month = c(7, 10, 7, 4),
  day = c(20, 19, 15, 9)
)
# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(df, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)
```

:::




::: {.column width="48%"}

```{.r}
df |> 
  arrange(year, month, day)
```

<br>
<div style="display:block; margin:47px;"></div>

```{r}
#| echo: false
# Create a DT datatable without search box and 'Show entries' dropdown

df <- data.frame(
  year = c(2024, 2021, 2024, 2024),
  month = c(7, 10, 7, 4),
  day = c(20, 19, 15, 9)
)



DT::datatable(df |> 
  arrange(year, month, day), rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)
```

:::

::::


- `arrange()` sorts out observations.
  - If we provide more than one variable name, each additional variable will be used to break ties in the values of preceding variables.


## Arrange observations with `arrange()`
### Descending order with `desc()`
```{.r}
# arrange observations by `dep_delay` in descending order.
flights |> 
  arrange(desc(dep_delay))
  
flights |> 
  arrange(-dep_delay)
```


- Use `desc(VARIABLE)` to re-order by a `VARIABLE` in descending order.
  - Adding `-` before a numeric variable (`-NUMERIC_VARIABLE`) also works.





# Select variables with `select()` {background-color="#1c4982"}


## Select variables with `select()`
### Basic
:::{.nonincremental}

- Itâ€™s not uncommon to get datasets with hundreds or thousands of variables.

- `select()` allows us to narrow in on the variables we're actually interested in. 

- We can select variables by their names.

:::

```{.r}
flights |> 
  select(year, month, day)
```




## Select variables with `select()`
### Removal
```{.r}
flights |> 
  select(-year)
```

:::{.nonincremental}

- With `select(-VARIABLES)`, we can remove variables.

:::


# Rename variables with `rename()` {background-color="#1c4982"}


## Rename variables with `rename()`

```{.r}
flights |> 
  rename( tail_num = tailnum )
```

:::{.nonincremental}

- `rename()` can be used to rename variables:

  - `DATA_FRAME |> rename(NEW_VARIABLE = EXISTING_VARIABLE)`

:::



