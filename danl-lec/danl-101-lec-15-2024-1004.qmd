---
title: Lecture 15
subtitle: Data Preparation and Management with `R`
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-10-04
execute: 
  eval: true
  echo: false
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```



# Data Transformation with R `tidyverse` {background-color="#1c4982"}


## Data Transformation
<!-- ### `dplyr` basics -->

- `DATA.FRAME |> filter(LOGICAL_CONDITIONS)`
- `DATA.FRAME |> arrange(VARIABLES)`
- `DATA.FRAME |> distinct(VARIABLES)`
- `DATA.FRAME |> select(VARIABLES)`
- `DATA.FRAME |> rename(NEW_VARIABLE = EXISTING_VARIABLE)`

- The subsequent arguments describe what to do with the data.frame, mostly using the variable names.
- The result is a **data.frame**.



# Filter observations with `filter()` {background-color="#1c4982"}

## Filter observations with `filter()`
### Missing values (`NA`)

:::{.nonincremental}
- Almost any operation involving an unknown value (`NA`) will also be unknown.


```{.r}
NA > 5
10 == NA
NA + 10
NA / 2
(1 + NA + 3) / 3
mean( c(1, NA, 3) )
sd( c(1, NA, 3) )
```
:::


## Filter observations with `filter()`
### Missing values (`NA`)

:::{.nonincremental}

- Let `x` be Mary's age. We don't know how old she is.
- Let `y` be John's age. We don't know how old he is.
- Are John and Mary the same age?

:::
```{.r}
x <- NA
y <- NA
x == y
```


## Filter observations with `filter()`
### `is.na()`
:::{.nonincremental}

- If we want to determine if a value is missing, use `is.na()`.
- If we want to preserve missing values, ask `filter()` for them explicitly.

:::

:::: {.columns}
::: {.column width="45%"}
```{.r}
x <- NA
is.na(x) # is x NA?

y <- "missing"
is.na(y) # is y NA?

v1 <- c(1, NA, 3)
is.na(v1) # is v1 NA?
```
:::

::: {.column width="55%"}
```{.r}
df <- data.frame(v1 = c(1, NA, 3),
                 v2 = c(1, 2, 3))

df |> 
  filter( is.na(v1) )

df |> 
  filter( !is.na(v1) )
```
:::

::::


