---
title: Lecture 19
subtitle: Data Visualization
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-10-21
execute: 
  eval: true
  echo: false
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---

```{r}
#| include: false

library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight() +
            theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.75)),
                axis.text.y = element_text(size = rel(1.75)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```



# Data Visualization {background-color="#1c4982"}

## Exploratory Data Analysis (EDA)

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/r4ds-fig-communicate.png" style="width: 75%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

- **Data Visualization**: Convert raw data into meaningful plots for better understanding.

- **Data Transformation**: Use key functions to filter observations, select variables, create new variables, and compute summaries.

- **Exploratory Data Analysis (EDA)**: Combine **descriptive statistics** (`skim()`), **visualization**, and **transformation** with curiosity and skepticism to explore and discover insights.


## Data Storytelling

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/data-storytelling.png" style="width: 50%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

- **Data Storytelling**: Bridge the gap between **data** and **insights** by **narrating** and **visualizing** findings within the appropriate **context** to help drive data-informed decisions.


## Data Storytelling
### Why storytelling with data matters?

> "The narrative is the key vehicle to convey insights, and the visualizations are important proof points to back up the narrative." Ryan Fuller, Corporate Vice President, M365 Data Strategy at Microsoft

- **Data visualizations** are useful for showing "what" is happening in the data.
  - However, they often fall short in explaining the "why" or providing the necessary context to uncover underlying reasons.

- **Data storytelling** links the visualization with a narrative to answer the "why" and the "how" question, and conveys insights to the audience to make data-driven decision.


## Data Storytelling.

Data is the **what**. Stories are the **why** and **how**.


## Data visualization
### Tools

- Many tools for visualizing data -- **Power BI**, **Tableau**, **Python**, **R**, and more

- **Power BI** and **Tableau** have **drag-and-drop interfaces**, making them accessible to users with little to no coding experience.

- In **R**, there are multiple packages for creating data visualizations—**ggplot2** is the most widely used, and it’s the tool we will focus on in this course.
  - While we will briefly use **Power BI**, the primary visualization tool for this course will be **ggplot2** in R.
  
- Using **ggplot2** helps develop important coding and data skills, which are critical for more advanced data analytics work.


<!-- > *"The simple graph has brought more information to the data analyst's mind than any other device."  John Tukey* -->

<!-- - Data visualization is the creation and study of the visual representation of data -->


<!-- - If you are interested in Power BI or Tableau, you can check out courses in Coursera, LinkedIn Learning, and/or YouTube. -->
<!--   - They have **drag-and-drop interfaces**, making them accessible to users with little to no coding experience. -->



##





## Grammar of Graphics

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/grammar-of-graphics.png" style="width: 75%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

- A **grammar of graphics** is a tool that enables us to concisely describe the components of a graphic.
  
## Data Visualization - First Steps

```{.r}
library(tidyverse)
mpg
?mpg
```

- The `mpg` data frame, provided by `ggplot2`, contains observations collected by the US Environmental Protection Agency on 38 models of car.

- Q. Do cars with big engines use more fuel than cars with small engines?
  - `displ`: a car's engine size, in liters.
  - `hwy`: a car's fuel efficiency on the highway, in miles per gallon (mpg). 


-  What does the relationship between engine size and fuel efficiency look like?


## Data Visualization - First Steps
### Creating a `ggplot`


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy) )
```


- To plot `mpg`, run the above code to put `displ` on the `x`-axis and `hwy` on the `y`-axis.


## Data Visualization - First Steps
### Components of the Grammar of Graphics


```{.r}
ggplot( data = DATA.FRAME ) + 
  GEOM_FUNCTION( mapping = 
                     aes( MAPPINGS ) )
```


<!-- - To make a ggplot plot, replace the capitalized components in the code above with a `data.frame`, a `geom` function, or a collection of mappings such as `x = variable_1` and `y = variable_2`. -->

- A statistical graphic is a `mapping` of `data` variables to `aes`thetic attributes of `geom`etric objects.


- **Three Essential Components**:
  1. `data`: The data.frame containing the variables of interest.
  2. `geom_*()`: The geometric object in the plot (e.g., points, lines, bars).
  3. `aes()`: Aesthetic attributes of the geometric object (e.g., x-axis, y-axis, color, shape, size) mapped to variables in the data.frame.


# Aesthetic Mappings {background-color="#1c4982"}

## Aesthetic Mappings

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r4s_330_1.png" width="600px">
</p>



- In the plot above, one group of points (highlighted in red) seems to fall outside of the linear trend. 

  - How can you explain these cars? Are those hybrids?



## Aesthetic Mappings


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r4s_330_2.png" width="600px">
</p>

- An aesthetic is a visual property (e.g., `size`, `shape`, `color`) of the objects (e.g., `class`) in your plot.

- You can display a point in different ways by changing the values of its aesthetic properties. 

## Aesthetic Mappings
### Adding a `color` to the plot


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   color = class) )
```


## Aesthetic Mappings
### Adding a `shape` to the plot

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment


ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   shape = class) )
```




## Aesthetic Mappings
### Adding a `size` to the plot


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   size = class) )
```




## Aesthetic Mappings
### Adding an `alpha` (transparency) to the plot


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   alpha = class) )
```



## Aesthetic Mappings
### Overplotting problem

- Many points overlap each other. 
  - This problem is known as **overplotting**. 


- When points overlap, it's hard to know how many data points are at a particular location. 


- Overplotting can obscure patterns and outliers, leading to potentially misleading conclusions. 

- We can set a transparency level (`alpha`) between **0** (full transparency) and **1** (no transparency).


## Aesthetic Mappings
### Overplotting and `alpha`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .33)
```




## Aesthetic Mappings
### Specifying a `color` to the plot

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy), 
             color = "blue")
```




## Aesthetic Mappings

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/r4s_330_3.jpg" style="width: 50%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

- To set an aesthetic manually, set the aesthetic by name as an argument of your `geom_*()` function; i.e. it goes outside of `aes()`. 
  - You'll need to pick a level that makes sense for that aesthetic:
    - The name of a `color` as a *character string*.
    - The `size` of a point in *mm*.
    - The `shape` of a point as a *number*, as shown below.
  



## Common problems in `ggplot()`


```{.r}
ggplot(data = mpg) 
 + geom_point( mapping = 
                 aes(x = displ, 
                     y = hwy) )
```

- One common problem when creating `ggplot2` graphics is to put the `+` in the wrong place.
  - **Correct Approach**: Always place the `+` at the end of the previous line, not at the beginning of the next line.


# Geometric Objects {background-color="#1c4982"}

## Geometric Objects
- In order to keep things simple, we'll focus only on six different types of geometric objects, each with a commonly given name:
  - Scatterplot with `geom_point()`
  - Fitted curve/line with `geom_smooth()`
  - Histogram with `geom_histogram()`
  - Bar chart with `geom_bar()`
  - Boxplot with `geom_boxplot()`
  - Lineplot with `geom_line()`


## Geometric Objects
### Scatterplot with `geom_point()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = 0.33)
```

- A **scatterplot** visualizes **the relationship between two numerical variables**.


## Geometric Objects
### Fitted line with `geom_smooth()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment
ggplot(data = mpg) + 
  geom_smooth(mapping = 
               aes(x = displ, 
                   y = hwy)
              )
```

- A **fitted curve** visualizes **the relationship between two numerical variables**.


## Geometric Objects
### Fitted line with `geom_smooth(method = lm)`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment
ggplot(data = mpg) + 
  geom_smooth(mapping = 
               aes(x = displ, 
                   y = hwy),
              method = lm)
```

- Setting `method = lm` manually in `geom_smooth()` gives a *straight line* that fits into data points.


## Geometric Objects
### `geom_point()` with `geom_smooth(method = lm)`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = 0.33) + 
  geom_smooth(mapping = 
               aes(x = displ, 
                   y = hwy),
              method = lm)
```

- Using `geom_point()` and `geom_smooth()` together is an excellent option.



Here’s a revised version of the slide with some structural improvements and clarifications:

## Geometric Objects
### Local vs. Global Aesthetic Mapping

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment
ggplot(data = mpg,
       mapping = 
               aes(x = displ, 
                   y = hwy)
             ) + 
  geom_point(alpha = 0.33) + 
  geom_smooth(method = lm)
```

- **Global aesthetic mapping**: Defined in the main `ggplot()` function using `aes()`, applies to all layers of the plot unless overridden.
- **Local aesthetic mapping**: Defined within specific `geom_*()` layers (e.g., `geom_point()`, `geom_smooth()`), allows for layer-specific customizations.

## Geometric Objects
### Histogram with `geom_histogram()`




## Geometric Objects
### Bar Chart with `geom_bar()`



- A **bar chart** visualizes **the distribution of a categorical variable**.

- A **boxplot** visualizes **the distribution of a numerical variable**.




