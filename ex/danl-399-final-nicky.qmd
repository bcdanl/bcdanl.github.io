---
title: "DANL 399: Data Visualization and Presentation\nFinal Exam"
author: "Byeong-Hak Choe"
execute: 
  eval: true
  echo: false
  warning: false
  message: false
  fig-width: 9
---

## Loading R packages


```{r setup}
#| include: false
#| echo: true
library(knitr)
library(tidyverse)
library(lubridate)
library(socviz)
library(ggthemes)
library(ggrepel)
library(ggtext)
library(hrbrthemes)
library(gapminder)
library(stargazer)
library(broom)

theme_set(theme_ipsum() +
          theme(strip.background =element_rect(fill="lightgray")))
```



```{r}
#| echo: true
library(knitr)
library(tidyverse)
library(lubridate)
library(socviz)
library(ggthemes)
library(ggrepel)
library(ggtext)
library(hrbrthemes)
library(gapminder)
library(stargazer)
library(broom)

```


<br>

# Question 1

The following data set is for Question 1:

```{r}
#| echo: true
nyc_dog_license <- read_csv(
  'https://bcdanl.github.io/data/nyc_dog_license.csv')
nyc_zips_coord <- read_csv(
  'https://bcdanl.github.io/data/nyc_zips_coord.csv')
nyc_zips_df <- read_csv(
  'https://bcdanl.github.io/data/nyc_zips_df.csv')
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(nyc_dog_license) 
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(nyc_zips_coord) 
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(nyc_zips_df) 
```

<br>

## Q1a

- Replicate the following ggplot.

  - You should calculate the proportion of `Pit Bull (or Mix)` for each zip code.
  - You should join data.frames properly.
  - Choose the color palette from the `viridis` scales [https://ggplot2.tidyverse.org/reference/scale_viridis.html](https://ggplot2.tidyverse.org/reference/scale_viridis.html).
  - Use `coord_map(projection = "albers", lat0 = 39, lat1 = 45)`.


```{r, fig.width=8, fig.height=10}
# Joining two data frames using a common variable
nyc_zips_df <- nyc_zips_df %>% 
  left_join(nyc_zips_coord)

# Creating a data frame of the top 5 dog breeds by count
nyc_dogs <- nyc_dog_license %>%
  group_by(breed_rc) %>% 
  summarise(N = n()) %>% 
  filter(dense_rank(-N)<=5)

# Creating a data frame of dog breed frequency and percentage by zip code for the top 5 breeds
nyc_fb <- nyc_dog_license %>%
  group_by(zip_code, breed_rc) %>%
  summarize(n = n()) %>%
  mutate(freq = n / sum(n),
         pct = round(freq*100, 2)) %>%
  filter(breed_rc %in% nyc_dogs$breed_rc )


# theme_nymap <- function(base_size=9, base_family="") {
#   require(grid)
#   theme_bw(base_size=base_size, base_family=base_family) %+replace%
#     theme(axis.line=element_blank(),
#           axis.text=element_blank(),
#           axis.ticks=element_blank(),
#           axis.title=element_blank(),
#           panel.background=element_blank(),
#           panel.border=element_blank(),
#           panel.grid=element_blank(),
#           panel.spacing=unit(0, "lines"),
#           plot.background=element_blank(),
#     )
# }


# Create a map of New York City zip codes colored by the share of Pit Bull dogs 
# and their mixes out of all licensed dogs, based on licensing data
fb_map <- nyc_zips_df %>% 
  left_join(nyc_fb)

# Filter for Pit Bull breeds and plot the map
filter(fb_map, breed_rc %in% c('Pit Bull (or Mix)')) %>% 
  ggplot(mapping = aes(x = X, y = Y, 
                       fill = pct,
                       group = zip_code)) +
  geom_polygon(color = "gray80", 
               size = 0.1) +    # draw the zip code polygons
  scale_fill_viridis_c(option = "inferno",
                       breaks = seq(0,24,2)) +  # set the color scale for Pit Bull share
  labs(fill = "Pit Bull's Share of All Licensed Dogs (%)",
       title = "New York City's Pit Bull",
       subtitle = "By Zip Code. Based on Licensing Data") +  # set the map title and legend title
  theme_map() +  # set the map theme
  theme(legend.justification = c(.5,.5),
        legend.position = 'top',
        legend.direction = "horizontal",
        legend.text = element_text(size= rel(1.25)),
        legend.title = element_text(size= rel(1.25),
                                face = 'bold',
                                hjust = .5),
        plot.title = element_text(hjust = .5,
                                  vjust = .5,
                                  face = 'bold',
                                  size = rel(2.25)),
        plot.subtitle = element_text(hjust = .5,
                                     vjust = .5,
                                     size = rel(1.25))) +  # customize the theme of the plot
  coord_map(projection = "albers", lat0 = 39, lat1 = 45) +  # set the map projection
  guides(fill = guide_legend(title.position = "top",
                             label.position = "bottom",
                             keywidth = 1, nrow = 1))  # set the legend position


```

## Q1b
- Which `zip_code` does have the highest proportion of `Pit Bull (or Mix)`?

```{r}
q3b <- fb_map %>% 
  select(zip_code, breed_rc, pct) %>% 
  filter(breed_rc == 'Pit Bull (or Mix)') %>% 
  arrange(-pct) %>% 
  distinct()
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(q3b) 
```

<br><br>


# Question 2.
Below is the data frame for Question 2:

```{r}
#| echo: true
eia_table <- read_csv(
  'https://bcdanl.github.io/data/table_eia_20231213.csv')
```

- Replicate the following ggplot:

```{r}
knitr::include_graphics("eia-gas-cost.png")
```



<br><br>


# Question 3.
Below is the data frame for Question 3:

```{r, echo = T}
holiday_movies <- read_csv("https://bcdanl.github.io/data/holiday_movies.csv")
```

- The data.frame **holiday_movies** comes from the Internet Movie Database (IMDb). 


## Variable description

- **tconst**: alphanumeric unique identifier of the title

- **title_type**: the type/format of the title 
  - (**movie**, **video**, or **tvMovie**)

- **primary_title**: the more popular title / the title used by the filmmakers on promotional materials at the point of release

- **simple_title**: the title in lowercase, with punctuation removed, for easier filtering and grouping

- **year**: the release year of a title

- **runtime_minutes**: primary runtime of the title, in minutes

- **average_rating**: weighted average of all the individual user ratings on IMDb

- **num_votes**: number of votes the title has received on IMDb (titles with fewer than 10 votes were not included in this dataset)

<br>


- The following is the data.frame, **holiday_movies**.
```{r, results = 'asis'}
rmarkdown::paged_table(holiday_movies,
                       options = list(rows.print = 20,
                                      cols.print = 6,
                                      pages.print = 0,
                                      paged.print = F
                                      )) 
```

<br>


```{r, echo = T}
nrow(holiday_movies)
ncol(holiday_movies)
```

<br>


```{r, echo = T}
unique(holiday_movies$title_type)
```

<br>

```{r, echo = T}
length(unique(holiday_movies$primary_title))
unique(holiday_movies$primary_title)[1:50]
```

<br>

```{r, echo = T}
length(unique(holiday_movies$simple_title))
unique(holiday_movies$simple_title)[1:50]
```


<br>


```{r, echo = T}
length(unique(holiday_movies$year))
unique(holiday_movies$year)
```

<br>

```{r, echo = T}
unique(holiday_movies$runtime_minutes)
unique(holiday_movies$average_rating)
```

<br>


- The following is another data.frame **holiday_movie_genres** that is related with the data.frame **holiday_movies**:

```{r, echo = T}
holiday_movie_genres <- read_csv("https://bcdanl.github.io/data/holiday_movie_genres.csv")
```


```{r, results = 'asis'}
rmarkdown::paged_table(holiday_movie_genres,
                       options = list(rows.print = 20,
                                      cols.print = 6,
                                      pages.print = 0,
                                      paged.print = F
                                      )) 
```

- The data.frame **holiday_movie_genres** include up to three genres associated with the titles that appear in the data.frame.


```{r, echo = T}
unique(holiday_movie_genres$genres)
```


## Variable description

  - **tconst**: alphanumeric unique identifier of the title
  - **genres**: genres associated with the title, one row per genre


<br><br>


## Q3a.

- Provide the R code to generate the data.frame, **holiday_movie_with_genres**, which combines the two data.frames, **holiday_movies** and **holiday_movie_genres**:


```{r}
holiday_movies_with_genres <- holiday_movie_genres %>% 
  left_join(holiday_movies)
```


- The following shows the first four variables in **holiday_movie_with_genres**:
```{r, results = 'asis'}
rmarkdown::paged_table(holiday_movies_with_genres,
                       options = list(rows.print = 20,
                                      cols.print = 6,
                                      pages.print = 0,
                                      paged.print = F
                                      )) 
```


<br><br>

## Q3b.

- Provide the R code to see how the summary statistics---mean, median, standard deviation, minimum, maximum, first and third quartiles---of **average_rating** and **num_votes** varies by popular **genres** and **title_type**.

  - Consider only the five popular **genres**, which are selected in terms of the number of titles for each genre.
  - Removes the **video** type of the titles when calculating the summary statistics.



```{r}
#| eval: false
popular_genres <- holiday_movies_with_genres %>% 
  group_by(genres) %>% 
  count() %>% 
  ungroup() %>% 
  slice_max(n, n = 5)

holiday_movies_with_genres %>% 
  filter(genres %in% popular_genres$genres,
         title_type != 'video') %>% 
  group_by(genres, title_type) %>% 
  skim(average_rating, num_votes) 

```


<br><br>

## Q3c.

- Provide R code to recreate the ggplot figure illustrating how the relationship between **log10(num_votes)** and **average_rating** varies by the popular **genres** and **title_type**.
  - The five popular **genres** are selected in terms of the number of titles for each genre.
  - The **video** type of the titles are removed in the ggplot figure.



```{r}
popular_genres <- holiday_movies_with_genres %>% 
  group_by(genres) %>% 
  count() %>% 
  ungroup() %>% 
  slice_max(n, n = 5)

holiday_movies_with_genres %>% 
  filter(genres %in% popular_genres$genres,
         title_type != 'video') %>% 
  group_by(genres) %>% 
  mutate(mean_rating = mean(average_rating, na.rm = T)) %>% 
  ggplot(aes(y = average_rating, x = log10(num_votes))) +
  geom_point(alpha = .2) +
  geom_smooth(aes(color = genres),
              method = lm) +
  # coord_cartesian(ylim = c(5,7)) +
  facet_grid(title_type~ genres, scales = "free")
```



<br><br>

## Q3d.

- Provide a comment to illustrate how the relationship between **log10(num_votes)** and **average_rating** varies by the popular **genres** and **title_type**.


<br><br>

## Q3e.

- Provide R code to recreate the ggplot figure illustrating the annual trend of the share of number of movies by popular genre from year 1975 to 2022.

  - For genres that are not popular, categorize them as **"Other"**.
  - Consider changing the order of categories in **genres**.

```{r}
holiday_movies_with_genres %>% 
  mutate(genres = ifelse( !(genres %in% popular_genres$genres), "Other", genres )) %>% 
  group_by(year, genres) %>% 
  count() %>% 
  filter(year >= 1975, year <= 2022) %>% 
  ggplot() +
  geom_col(aes(x = year, y = n, 
               fill = fct_reorder2(genres, year, n)), 
           position = 'fill', 
           width = rel(1.25),
           color = 'black') +
  labs(y = "Share of number of movies by genre",
       fill = "genres") +
  scale_fill_brewer(palette = "Accent")
```


<br>

## Q3f.

- Provide a comment to illustrate the annual trend of (1) the share of number of movies by popular genre from year 1975 to 2022.

  - Which genre has become more popular since 2010?
