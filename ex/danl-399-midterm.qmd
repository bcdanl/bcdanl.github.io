---
title: "DANL 399: Data Visualization and Presentation\nMidterm Exam"
author: "Byeong-Hak Choe"
execute: 
  eval: true
  echo: true
  warning: false
  message: false
  fig-width: 9
---

## Loading R packages


```{r setup}
#| include: false
#| echo: true
library(knitr)
library(tidyverse)
library(lubridate)
library(socviz)
library(ggthemes)
library(ggrepel)
library(ggtext)
library(hrbrthemes)
library(gapminder)
library(stargazer)
library(broom)

theme_set(theme_ipsum() +
          theme(strip.background =element_rect(fill="lightgray")))
```



```{r}
#| echo: true
library(knitr)
library(tidyverse)
library(lubridate)
library(socviz)
library(ggthemes)
library(ggrepel)
library(ggtext)
library(hrbrthemes)
library(gapminder)
library(stargazer)
library(broom)

```


<br>

# Question 1

The following data is for Question 1:

```{r}
#| echo: true
gapminder <- gapminder::gapminder
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(gapminder) 
```

<br>

## Q1a
- Replicate the following ggplot.
  - Use the color `#0072B2` for dots.

```{r, fig.height= 12, fig.width=8}
# Set the data and filter to include only observations from 2007 and exclude Oceania
ggplot(data = filter(gapminder, year == 2007,
                     continent != 'Oceania'),

       # Set the aesthetics (x-axis and y-axis) to life expectancy and reorder countries by life expectancy
       aes(x = lifeExp,
           y = fct_reorder(country, lifeExp))) +

  # Add a layer of points to the plot, setting the color to blue and size to 1.75
  geom_point(color = "#0072B2", size = 1.75) +

  # Add a layer of text labels to the plot, setting the label to life expectancy, hjust to -.25, and size to 2
  geom_text(aes(label = lifeExp), hjust = -.25,
            size = 2) +

  # Facet the plot by continent, with y-scales free
  facet_wrap(.~continent, scales = "free_y") +

  # Set the x-axis label to NULL (no name) and limit the x-axis to 35-90
  scale_x_continuous(
    name = NULL,
    lim = c(35, 90)
  ) +

  # Set the y-axis label to NULL (no name)
  scale_y_discrete(name = NULL) +

  # Add a title to the plot
  labs(title = 'Life expectancy in 2007') +

  # Set the theme to minimal
  theme_minimal() +

  # Customize theme elements: set the y-axis text size, the plot title size and position, and the facet strip text size and font face
  theme(
    axis.text.y = element_text(size = rel(.75)),
    plot.title = element_text(size = rel(1.5),
                              hjust = 0.5,
                              face = 'bold'),
    strip.text = element_text(size = rel(1.25),
                              face = 'bold')
  )

```

## Q1b 
- Make a simple comment on the visualization result.

  - Any comment that is not made up is okay.

<br><br><br>

# Question 2

The following data is for Question 2:

```{r}
#| echo: true
n_tweets_long <- read_csv(
  'https://bcdanl.github.io/data/n_tweets_long.csv')
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(n_tweets_long) 
```

<br>

## Q2a 

- Replicate the following ggplot.

  - The following describes the `type` values:
    - `n_ot_us`: Number of US tweets 
    - `n_ot_wrld`: Number of worldwide tweets 
    - `n_rt_lk_us`: Number of US retweets & likes
    - `n_rt_lk_wrld`: Number of worldwide retweets & likes 
  - Use the colors, `maroon` and `#428bca` properly.
  


```{r}
#| fig-height: 8
# The following line filters the rows of the n_tweets_long data frame that have a value of "n_ot_us" or "n_ot_wrld" in the "type" column. 
# It then creates a new column called "type" that replaces "n_ot_us" with "US" and "n_ot_wrld" with "Worldwide".
n_tweets_long1 <- n_tweets_long %>% 
  filter(type %in% c("n_ot_us", "n_ot_wrld") ) %>% 
  mutate(type = ifelse(type == "n_ot_us", "US", "Worldwide"))


# The following line filters the rows of the n_tweets_long data frame that have a value of "n_rt_lk_us" or "n_rt_lk_wrld" in the "type" column. 
# It then creates a new column called "type" that replaces "n_rt_lk_us" with "US" and "n_rt_lk_wrld" with "Worldwide".
n_tweets_long2 <- n_tweets_long %>% 
  filter(type %in% c("n_rt_lk_us", "n_rt_lk_wrld") ) %>% 
  mutate(type = ifelse(type == "n_rt_lk_us", "US", "Worldwide"))
  


p2 <- ggplot(mapping = aes(x = year, y = n)) +  # Create a ggplot object with the mapping of the x-axis to the "year" variable and y-axis to the "n" variable
  geom_col(n_tweets_long1,  # Add a column chart layer with the "n_tweets_long1" data
           mapping = aes(fill = type),  # Map the "type" variable to the fill aesthetic of the chart
           position = 'dodge', alpha = .67) +  # Set the position of the columns to "dodge" and the transparency to 0.67
  geom_line(n_tweets_long2,  # Add a line chart layer with the "n_tweets_long2" data
            mapping = aes(color = type),  # Map the "type" variable to the color aesthetic of the chart
            size = 1.5) +  # Set the line size to 1.5
  geom_point(data = n_tweets_long2,  # Add a point chart layer with the "n_tweets_long2" data
             size = 2,  # Set the point size to 2
             color = 'black')  +  # Set the point color to black
  scale_x_continuous(breaks = seq(2012, 2017, 1)) +  # Set the x-axis breaks to the sequence from 2012 to 2017 with an interval of 1
  scale_y_continuous(label = scales::comma) +  # Format the y-axis labels using the comma function from the scales package
  scale_color_manual(values = c('maroon', '#428bca')) +  # Manually set the color values for the color aesthetic
  scale_fill_manual(values = c('maroon', '#428bca')) +   # Manually set the color values for the fill aesthetic
  guides(fill = guide_legend(reverse = TRUE,  # Customize the fill legend guide by reversing the order of the legend, positioning the labels at the bottom, and setting the number of rows to 2 and the key width to 2
                             # title.position = "top",
                             label.position = "bottom",
                             keywidth = 2,
                             nrow = 2,
                             order = 1),
         color = guide_legend(reverse = TRUE,  # Customize the color legend guide by reversing the order of the legend, positioning the labels at the bottom, and setting the number of rows to 2 and the key width to 2
                             # title.position = "top",
                             label.position = "bottom",
                             keywidth = 2,
                             nrow = 2,
                             order = 2)) +
  labs(x = "Year",  # Add x-axis label "Year"
       y = "Number of Tweets, Retweets & Likes\n (in thousand)",  # Add y-axis label "Number of Tweets, Retweets & Likes (in thousand)"
       fill = "Tweets",  # Add fill legend label "Tweets"
       color = "Retweets and likes",  # Add color legend label "Retweets and likes"
       caption = 'Source: Choe, "Social Media Campaigns, Lobbying, and Climate Change Legislation:\n Evidence from #climatechange/#globalwarming and Energy Lobbies" (2023)') +  # Add caption with source information
  theme_ipsum() +  # Use the 'theme_ipsum' theme from the 'ggthemes' package
  theme(
  axis.title.y = element_text(
    size = rel(1.5),
    margin = margin(t = 0, r = 20, b = 0, l = 0) # set the margin for the y axis title
  ),
  axis.title.x = element_text(
    size = rel(1.5),
    margin = margin(t = 10, r = 0, b = 0, l = 0) # set the margin for the x axis title
  ),
  axis.text.x = element_text(
    size = rel(1.25) # set the font size for the x axis tick labels
  ),
  axis.text.y = element_text(
    size = rel(1.25) # set the font size for the y axis tick labels
  ),
  legend.position = 'top', # set the position of the legend
  legend.title = element_text(
    size = rel(1),
    face = 'bold',
    hjust = .5 # set the font size, face and horizontal justification for the legend title
  ),
  legend.text = element_text(
    size = rel(1) # set the font size for the legend text
  ),
  legend.spacing.x = unit(1.25, "cm"), # set the horizontal spacing between legend items
  plot.caption = element_text(
    size = rel(1.25),
    hjust = .5 # set the font size and horizontal justification for the plot caption
  )
)


p2
```

## Q2b. 

- Make a simple comment on the visualization result.



<br><br><br>

# Question 3

The following data set is for Question 3:

```{r}
#| echo: true
electricity <- read_csv(
  'https://bcdanl.github.io/data/electricity-usa-chn.csv')
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(electricity) 
```

<br>

## Q3a

- Replicate the following ggplot.

```{r}
#| fig-height: 9
ggplot(data = electricity,
       aes(x = year, y = value)) + 
  geom_line(aes(color = energy),
            linewidth = 1.25) +
  geom_hline(yintercept = 0) +  
  geom_vline(xintercept = min(electricity$year)) +
  facet_wrap(.~ iso3c, 
             labeller = as_labeller(c('CHN' = "China",
                                      "USA" = "United States"))) +
  scale_y_comma() +
  scale_color_viridis_d(option = "C") +
  guides(color = guide_legend(label.position = "bottom",
                             keywidth = 3,
                             nrow = 1)) +
  labs(x = "Year", y = "Electricity\nGeneration\n(TWh)",
       color = "Energy") +
  hrbrthemes::theme_ipsum() +
  theme(axis.title.y = element_text(size = rel(1.25),
                                    angle = 0),
        axis.title.x = element_text(size = rel(1.25),
                                    angle = 0),
        strip.background = element_rect(fill = 'grey90',
                                        colour = NA),
        legend.position = 'top')

```



## Q3b

- Replicate the following ggplot.

```{r}
#| fig-height: 9
electricity2 <- electricity %>% 
  group_by(iso3c, year) %>% 
  mutate(tot = sum(value),
         prop = value / tot)


ggplot(data = electricity2,
       aes(x = year, y = prop)) + 
  geom_line(aes(color = energy),
            linewidth = 1.25) +
  geom_hline(yintercept = 0) +  
  geom_vline(xintercept = min(electricity$year)) +
  facet_wrap(.~ iso3c, 
             labeller = as_labeller(c('CHN' = "China",
                                      "USA" = "United States"))) +
  scale_y_percent() +
  scale_color_viridis_d(option = "D") +
  guides(color = guide_legend(label.position = "bottom",
                              keywidth = 3,
                              nrow = 1)) +
  labs(x = "Year", y = "Percentage of\nElectricity\nGeneration\n(TWh)",
       color = "Energy") +
  hrbrthemes::theme_ipsum() +
  theme(axis.title.y = element_text(size = rel(1.25),
                                    angle = 0),
        axis.title.x = element_text(size = rel(1.25),
                                    angle = 0),
        strip.background = element_rect(fill = 'grey90',
                                        colour = NA),
        legend.position = 'top')
```


<br><br><br>

# Question 4

The following data set is for Question 4:

```{r}
#| echo: true
starbucks <- read_csv(
  'https://bcdanl.github.io/data/starbucks.csv')
```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(starbucks) 
```

## Variable description

- `Product_Name`:	Product Name
- `Size`:	Size of drink (short, tall, grande, venti)
- `Milk`:	Milk Type type of milk used
  - `0` none
  - `1` nonfat
  - `2` 2%
  - `3` soy
  - `4` coconut
  - `5` whole
- `Whip`:	Whip added or not (binary 0/1)
- `Serv_Size_mL`: Serving size in ml
- `Calories`: KCal
- `Total_Fat_g`: Total fat grams
- `Saturated_Fat_g`: Saturated fat grams
- `Trans_Fat_g`: Trans fat grams
- `Cholesterol_mg`: Cholesterol mg
- `Sodium_mg`: Sodium milligrams
- `Total_Carbs_g`: Total Carbs grams
- `Fiber_g`: Fiber grams
- `Sugar_g`: Sugar grams
- `Caffeine_mg`: Caffeine in milligrams

## Q4a.
- Add the following two variables to `starbucks` data.frame
  - `caffeine_mgml`: Caffeine in milligrams per mL
  - `calories_kcml`: Calories KCal per mL

```{r}
starbucks1 <- starbucks |> 
  mutate(caffeine_mgml = caffeine_mg / serv_size_m_l,
         calories_kcml = calories/ serv_size_m_l,
         .before = 1) %>% 
  select(product_name, size, serv_size_m_l, milk, whip, caffeine_mgml, calories_kcml)
```

<br>

## Q4b.
- Calculate a mean `caffeine_mgml` and a mean `calories_kcml` for each `product_name`.

```{r}
starbucks2 <- starbucks1 %>% 
  group_by(product_name) %>% 
  summarise(caffeine_mgml = mean(caffeine_mgml, na.rm = T),
            calories_kcml = mean(calories_kcml, na.rm = T)
  ) %>% 
  mutate(rank_caffeine = dense_rank(-caffeine_mgml),
         rank_calories = dense_rank(-calories_kcml)) %>% 
  filter(rank_caffeine <= 10 |rank_calories <= 10 )
```

<br>


## Q4c.
- For the top 10 `product_name` in terms of `caffeine_mgml` and the top 10 `product_name` in terms of `calories_kcml`, replicate the following ggplot.

- Use the following commands for showing texts in the plot:
```{r}
#| echo: true
# install.packages("showtext")
library(showtext)
showtext_auto()
font_add_google("Annie Use Your Telescope", "annie")
```

- Use the following `annotate()` geom to insert the starbucks image in the plot:

```{r}
#| echo: true
#| eval: false
annotate("richtext", 
           x =  , 
           y =  , 
           label = "<img src='https://bcdanl.github.io/ex/starbucks.png' width='100'/>", 
           fill =  ,
           size =  , 
           color =  )
```

- Use the following `geom_text_repel()` geom to use the `annie` font

```{r}
#| echo: true
#| eval: false
geom_text_repel(max.overlaps = ,
                  size =  ,
                  min.segment.length =  ,
                  point.padding =  ,
                  box.padding =  ,
                  show.legend =  ,
                  family = "annie")
```


- Use the color, `#00704A`, for the title.

```{r}
#| fig-height: 9
#| warning: false
#| message: false

starbucks_caffeine <- starbucks2 %>% filter(rank_caffeine <= 10)
starbucks_calories <- starbucks2 %>% filter(rank_calories <= 10)


starbucks2 %>% 
  ggplot(aes(x = calories_kcml, y = caffeine_mgml, 
             color = product_name, label = product_name)) +
  geom_point(show.legend = FALSE) +
  geom_rect(aes(xmin = min(starbucks_caffeine$calories_kcml), xmax = max(starbucks_caffeine$calories_kcml), 
                ymin = min(starbucks_caffeine$caffeine_mgml), ymax = max(starbucks_caffeine$caffeine_mgml)),
            fill = "#27251F", 
            alpha = 0.004, color = NA)+
  geom_rect(aes(xmin = min(starbucks_calories$calories_kcml), xmax = max(starbucks_calories$calories_kcml), 
                ymin = min(starbucks_calories$caffeine_mgml), ymax = max(starbucks_calories$caffeine_mgml)),
            fill = "#27251F", 
            alpha = 0.004, color = NA)+
  geom_text_repel(max.overlaps = 6,
                  size = 4,
                  min.segment.length = 0.1,
                  point.padding = 0.4,
                  box.padding = 0.5,
                  show.legend = FALSE,
                  family = "annie") +
  annotate("richtext", 
           x = quantile(starbucks2$calories_kcml, probs = .75), 
           y = quantile(starbucks2$caffeine_mgml, probs = .75), 
           label = "<img src='https://bcdanl.github.io/ex/starbucks.png' width='100'/>", 
           fill = NA,
           size = rel(2.25), 
           color = NA) +
  scale_x_continuous(breaks = seq(0, 1, .2)) +
  scale_y_continuous(breaks = seq(0, 1, .2)) +
  labs(y = expression(paste("Caffeine (mg mL"^"-1",")")), 
       x = expression(paste("Calories (Kcal mL"^"-1",")")),
       caption = "Source: Starbucks Coffee Company Beverage Nutrition Information",
       title = "STARBUCKS DRINKS",
       subtitle = "Caffeine or Calories, which one you would go?") +
  theme_ipsum() +
  theme(plot.title = element_text(color = "#00704A",
                                  face = 'bold',
                                  size = rel(2.5)),
        plot.subtitle = element_text(face = 'bold',
                                  size = rel(1.75)),
        axis.title.x = element_text(face = 'bold',
                                  size = rel(1.25)),
        axis.title.y = element_text(face = 'bold',
                                  size = rel(1.25)))
```

