---
title: "DANL 200: Classwork 3 - Data Visualization"
date: 2023-09-22
execute: 
  warning: false
  message: false
---
```{r}
#| include: false

library(knitr)
library(rmarkdown)
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)

theme_set(theme_ipsum() +
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = element_text(size = rel(1.5)),
                axis.title.y = element_text(size = rel(1.5)),
                legend.title = element_text(size=rel(1.25))
                ))
```

# Question 1. Geometric Objects

## Q1a.
Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.

```{r}
#| echo: true
#| eval: false

ggplot(data = mpg, 
       mapping = aes(x = displ, y = hwy, 
                     color = drv)) +
  geom_point(alpha = .4) +
  geom_smooth(se = FALSE)

```


<br>

## Q1b.
What does `show.legend = FALSE` do? What happens if you remove it? Why do you think I used it earlier in the lecture?


<br>

**Answer:** `show.legend = FALSE` turns off the legend in ggplot. 

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, 
                           color = drv),
             alpha = .5,
             show.legend = FALSE)
```

The default is `show.legend = TRUE`:
```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, 
                           color = drv),
             alpha = .5,
             show.legend = TRUE)
```

Sometimes, we do not need to have a separate legend in ggplot, for example, `geom_boxplot()` with `fill` mapping.


## Q1c.
Recreate the R code necessary to generate the following graphs.

### (a)
```{r}
#| code-fold: true
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(alpha = .4) +
  geom_smooth(se = FALSE)
```

<br>

### (b)
```{r}
#| code-fold: true
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(group = drv), 
              se = FALSE) +
  geom_point(alpha = .4)

```

<br>


### (c)
```{r}
#| code-fold: true
ggplot(mpg, aes(x = displ, y = hwy, 
                color = drv)) +
  geom_point(alpha = .4) +
  geom_smooth(se = FALSE)

```

<br>


### (d)
```{r}
#| code-fold: true
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv), alpha = .4) +
  geom_smooth(se = FALSE)

```

<br>

### (e)
```{r}
#| code-fold: true
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv), alpha = .4) +
  geom_smooth(aes(linetype = drv), se = FALSE)

```

<br>

### (f)
```{r}
#| code-fold: true
ggplot(mpg, 
       aes(x = displ, y = hwy)) +
  geom_point(size = 4, color = "white") +
  geom_point(aes(color = drv), alpha = .4) +
  theme_gray()
```

<br>


## Q1d.
- Use the data.frame, `organdata_simple` to visualize the yearly trend of the variable `donors` for each country.
```{r}
organdata_simple <- read_csv('https://bcdanl.github.io/data/organdata_simple.csv')
```

<br>

# Question 2. Statistical Transformation and Position Adjustment

## Q2a.
What does `geom_col()` do? How is it different to `geom_bar()`?

**Answer**:

Let's consider the bar chart for the distribution of `manufacturer` in the `mpg` data.frame.
```{r}
ggplot(mpg) +
  geom_bar(aes(y = manufacturer))
```

To compare between `geom_bar()` and `geom_col()`, create the data.frame, `q2a` that is the data.frame of `table(mpg$manufacturer)`:
```{r}

# we can use as.data.frame() 
# to convert to data.frame from table or vectors 
q2a <- as.data.frame(
  table(mpg$manufacturer)
  )

```

`q2a` has the two variables, `Var1` and `Freq`.
```{r}

q2a
```

<!-- `colnames(q2a)` gives the vector of variable names in `q2a` -->

`geom_bar(aes(y = ... , x = ... ))` causes error:
```{r}
#| echo: false
#| eval: false
ggplot(q2a) +
  geom_bar(aes(y = Var1, x = Freq))
```

`geom_bar(aes(y = Var1, x = Freq), stat = "identity")` will directly use the values of `Freq` to visualize a bar height for each category of `Var1`:
```{r}

ggplot(q2a) +
  geom_bar(aes(y = Var1, x = Freq),
           stat = "identity")
```

We can do the same with `geom_col(aes(y = Var1, x = Freq))`:
```{r}

ggplot(q2a) +
  geom_col(aes(y = Var1, x = Freq))

```


<br>

## Q2b.
- Install the R package, `nycflights13`, which provides the `flights` data.frame.

**Answer**:
```{r}
#| eval: false
install.packages("nycflights13")
```

<br>

- `nycflights13::flights` includes on-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013.
  - A unit of observation is flight.

```{r}
library(nycflights13)
head(flights)
```


- Visualize the distribution of `carrier`.

**Answer**:

- Bar chart
```{r}
library(nycflights13)
ggplot(flights) +
  geom_bar(aes(y = carrier))
```

- Proportional bar chart
```{r}
ggplot(flights) +
  geom_bar(aes(y = carrier, 
               x = stat(prop), group = 1))
```

<br>

- Visualize how the distribution of `carrier` varies by `origin`.

**Answer**:

- Facet
```{r}
ggplot(flights) +
  geom_bar(aes(y = carrier)) +
  facet_wrap( . ~ origin)
```


- Stacked bar chart
```{r}
ggplot(flights) +
  geom_bar(aes(y = carrier, fill = origin)) 
```

- Stacked proportional bar chart
```{r}
ggplot(flights) +
  geom_bar(aes(y = carrier, fill = origin),
           position = "fill") 
```

- Side-by-side bar chart
```{r}
ggplot(flights) +
  geom_bar(aes(y = carrier, fill = origin),
           position = "dodge") 
```

```{r}
ggplot(flights) +
  geom_bar(aes(y = origin, fill = carrier),
           position = "dodge") 
```


<br>

