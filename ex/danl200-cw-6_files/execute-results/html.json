{
  "hash": "22f778d382112e5c655935a5cf266d05",
  "result": {
    "markdown": "---\ntitle: \"DANL 200: Classwork 6 - filter, arrange, select, and mutate\"\ndate: 2023-10-13\nexecute: \n  warning: false\n  message: false\n---\n\n\n\n\n# Question 1. Filtering with `filter()`\n\n## Q1a.\n\n- Find all flights that\n  - Had an arrival delay of two or more hours\n  - Flew to Houston (`IAH` or `HOU`)\n  - Were operated by United, American, or Delta\n  - Departed in summer (July, August, and September)\n  - Arrived more than two hours late, but didnâ€™t leave late\n  - Were delayed by at least an hour, but made up over 30 minutes in flight\n  - Departed between midnight and 6am (inclusive)\n\n<br><br>\n\n## Q1b.\n\n- How many flights have a missing `dep_time`? What other variables are missing? What might these rows represent?\n\n<br><br>\n\n## Q1c.\n\n- Why is `NA^0` not missing? Why is `NA | TRUE` not missing? Why is `FALSE & NA` not missing? Can you figure out the general rule? (`NA * 0` is a tricky counterexample!)\n\n\n\n<br><br><br>\n\n\n# Question 2. Arrange rows with `arrange()`\n\n## Q2a.\n\n- How could you use `arrange()` to sort all missing values to the start? (Hint: use `is.na()`).\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(num = c(1, 4, NA, 2, NA, 3, 7),\n                 chr = c(\"A\", \"A\", \"A\", \"B\", \"X\", \"Z\", \"D\"))\n```\n:::\n\n\n<br>\n\n## Q2b.\n\n- Sort flights to find the most delayed flights. Find the flights that left earliest.\n\n<br>\n\n## Q2c.\n\n- Sort flights to find the fastest (highest speed) flights.\n\n<br>\n\n## Q2d.\n\n- Which flights traveled the farthest? Which traveled the shortest?\n\n<br><br><br>\n\n\n# Question 3. Select columns with `select()`\n\n## Q3a.\n\n- Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from flights.\n\n<br>\n\n## Q3b.\n\n- Does the result of running the following code surprise us? How do the select helpers deal with case by default? How can we change that default?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(flights, contains(\"TIME\"))\n```\n:::\n\n\n<br>\n\n## Q3c.\n- Rename `air_time` to `air_time_min` to indicate units of measurement and move it to the beginning of the data frame.\n\n\n<br><br><br>\n\n# Question 4. Add new variables with `mutate()`\n\n## Q4a.\n \n- Currently `dep_time` and `sched_dep_time` are convenient to look at, but hard to compute with because their values are represented with format HHMM or HMM (H for hour and M for minute).\n  - Convert them to a more convenient representation of number of **minutes** since midnight.\n\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n## Q4b. \n\n- Compare `air_time` with `arr_time - dep_time`. What do you expect to see? What do you see? What do you need to do to fix it?\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n## Q4c.\n\n- Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?\n\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n## Q4d.\n\n- Find the 20 most delayed flights using a ranking function. How do you want to handle ties? \n\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n## Q4e.\n- Read the following CSV file as a data.frame with the name `TSLA.csv`:\n\n::: {.cell}\n\n```{.r .cell-code}\ntsla <- read_csv(\"/Users/byeong-hakchoe/Documents/website/bcdanl.github.io/data/TSLA.csv\")\n```\n:::\n\n\n- Calculate the percentage change in `Close` price of Tesla stock.\n\n- Describe the daily trend of total `Volume` of Tesla stock.\n\n\n\n",
    "supporting": [
      "danl200-cw-6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}