---
title: "DANL 310: Data Visualization and Presentation<br>Homework Assignment 3"
author: "Byeong-Hak Choe"
execute: 
  echo: true
  eval: true
  warning: false
  message: false
  fig-width: 9
---


```{r setup, include = FALSE}
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggthemes)
# library(ggtech)
library(ggthemr)
library(ggthemes)
library(hrbrthemes)
library(hexbin)
library(ggforce)
library(skimr)

knitr::opts_chunk$set(fig.width=8, fig.height=5,
                      warning = F, message = F)  

theme_set(theme_ipsum() +
          theme(strip.background =element_rect(fill="lightgray")))
```

### Loading R packages

```{r, eval = T, echo = T}
library(tidyverse)
library(socviz)
library(lubridate)
```

# Question 1 - Bar Charts

The following data is for Question 1:

```{r}
#| echo: true
titanic <- read_csv(
  'https://bcdanl.github.io/data/titanic_cleaned.csv')

```

```{r, result = 'asis', echo = F}
rmarkdown::paged_table(titanic) 
```

<br><br>

- Replicate the following ggplot.

```{r}
titanic <- titanic %>% 
  mutate(surv = ifelse(survived == 0, "Died", "Survived")) 

ggplot(data = titanic,
            aes(x = sex, fill = sex)) + 
  geom_bar() +
  facet_grid(class ~ surv) +
  scale_x_discrete(name = NULL) + 
  scale_y_continuous(limits = c(0, 195)) +
  scale_fill_manual(values = c("#D55E00D0", "#0072B2D0"), 
                    guide = "none") +
  theme_bw() + 
  theme(axis.text.y = element_text(margin = margin(7, 7, 7, 7))) +
  labs( y = "Number of passengers")
```

<br><br>

# Question 2 - Bar Charts 2

The following data is for Question 2:

```{r, echo = T, eval = T, message=F}
nyc_flights <- read_csv(
  'https://bcdanl.github.io/data/nyc_flights_grouped.csv')

```

```{r, result = 'asis', echo = F, message = F, warning = F}
rmarkdown::paged_table(nyc_flights) 
```


- Replicate the following ggplot.

```{r}

nyc_flights %>%
  group_by(carrier_full) %>%
  tally() %>%
  mutate(highlight = ifelse(carrier_full %in% c("Delta", "American"), "yes", "no")) %>%
  ggplot(aes(x=reorder(carrier_full, n),
             y=n,
             fill = highlight)) +
  scale_fill_manual(values = c("#B0B0B0D0", "#BD3828D0"),
                    guide = "none") +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_discrete(name = NULL) +
  geom_col() +
  geom_text(aes(label = n), hjust = -.1, vjust = -.5,
            size = 4) +
  coord_flip(clip = "off") +
  theme_wsj() +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  ylim(c(0, 60000)) +
  labs( caption = "Sources: U.S. Department of Transportation,\nBureau of Transportation Statistics",
        y = "Number of flights",
        title = "Number of flights from NYC",
        subtitle = "Year 2013")
```

<br><br>

# Question 3 - Stocks

The following data is for Question 3:

```{r}
stock = read_csv('https://bcdanl.github.io/data/stocks2013_2023.csv')
```

```{r, result = 'asis', echo = F, message = F, warning = F}
rmarkdown::paged_table(stock) 
```



- Replicate the following ggplot.

  - For each company, the normalized closing price on each date is the company's closing price on each date divided by the company's closing price on the first date (2013-01-02).

$$
\text{(Normalized Closing Price)}_{\,\text{company},\,\text{date}}\,=\,\frac{\text{Closing}_{\,\text{company},\,\text{date} }}{\text{Closing}_{\,\text{company},\,\text{2013-01-02} }}
$$

  - The normalized closing price on the first date (2013-01-02) is `1` for each company.
  
  - `y`-axis represents the log of the normalized closing price.
  
```{r}
library(lubridate)
q3 <- stock %>% 
  group_by(company) %>% 
  mutate(normal_close =  1 * Close / first(Close))

p <- ggplot(q3, aes(x = Date, y = log(normal_close), color = fct_reorder2(company, Date, normal_close)))

p + 
  geom_line() +
  geom_hline(yintercept = 0, color = 'red', lty = 2) +
  scale_x_date(breaks = seq(as.Date(min(q3$Date)), as.Date(max(q3$Date)), by = "year")
) +
  scale_color_viridis_d() +
  ylim(c(min(log(q3$normal_close)), max(log(q3$normal_close)))) +
  labs(y = 'Normalized Closing Price (in log)', color = "Companies") +
  theme(axis.text.x = element_text(angle = 45))
```
