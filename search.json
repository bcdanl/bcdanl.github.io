[
  {
    "objectID": "DANL210_hw1q.html",
    "href": "DANL210_hw1q.html",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "",
    "text": "Write a Python code to answer each question.\nMake at least some simple comment (# ...) in each question.\nUse your working directory with the subfolder, data, so that the relative pathname of CSV files in the subfolder data is sufficient to import the CSV files.\nImport all the Python libraries you need here.\n\n\nimport pandas as pd"
  },
  {
    "objectID": "DANL210_hw1q.html#q1a",
    "href": "DANL210_hw1q.html#q1a",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q1a",
    "text": "Q1a\nCalculate the simple difference between the probability of survival when passengers are first-class and the probability of survival when they are not."
  },
  {
    "objectID": "DANL210_hw1q.html#q1b",
    "href": "DANL210_hw1q.html#q1b",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q1b",
    "text": "Q1b\nHow much does the probability of survival increase for first-class passengers relative to those who are not first-class passengers?"
  },
  {
    "objectID": "DANL210_hw1q.html#q1c",
    "href": "DANL210_hw1q.html#q1c",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q1c",
    "text": "Q1c\nConsider the probability of survival in titanic_2.csv.\n\ntitanic_2 = pd.read_csv(\"data/titanic_2.csv\")\n\nAfter stratifying on gender and age, what happens to the difference in the probabilities of survival between first-class passengers and non-first-class passengers.\nExplain in your own words what stratifying on gender and age did for this difference in probabilities of survival between first-class passengers and non-first-class passengers."
  },
  {
    "objectID": "DANL210_hw1q.html#q2a",
    "href": "DANL210_hw1q.html#q2a",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2a",
    "text": "Q2a\nHow many players have been recorded?"
  },
  {
    "objectID": "DANL210_hw1q.html#q2b",
    "href": "DANL210_hw1q.html#q2b",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2b",
    "text": "Q2b\nA column points (P) is missing in the data. The number of points of a player is defined as the sum of his goals (G) and assists (A). Add the point column P to your DataFrame."
  },
  {
    "objectID": "DANL210_hw1q.html#q2c",
    "href": "DANL210_hw1q.html#q2c",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2c",
    "text": "Q2c\nWho is the top scorer in terms of points?"
  },
  {
    "objectID": "DANL210_hw1q.html#q2d",
    "href": "DANL210_hw1q.html#q2d",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2d",
    "text": "Q2d\nHow many Russian (non-goalie) players had some ice time in there 2016/2017 regular season? Hint: Nationality of a player can be found in “Nat”. Russians are indicated by “RUS”."
  },
  {
    "objectID": "DANL210_hw1q.html#q2e",
    "href": "DANL210_hw1q.html#q2e",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2e",
    "text": "Q2e\nWhat are their names?"
  },
  {
    "objectID": "DANL210_hw1q.html#q2f",
    "href": "DANL210_hw1q.html#q2f",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2f",
    "text": "Q2f\nWho performed best among the Russian players in terms of points (P)?"
  },
  {
    "objectID": "DANL210_hw1q.html#q2g",
    "href": "DANL210_hw1q.html#q2g",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2g",
    "text": "Q2g\nHow many points (P) did he have?"
  },
  {
    "objectID": "DANL210_hw1q.html#q2h",
    "href": "DANL210_hw1q.html#q2h",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2h",
    "text": "Q2h\nHow well did he perform in the entire league? Put differently, what was his rank in terms of points?"
  },
  {
    "objectID": "DANL210_hw1q.html#q2i",
    "href": "DANL210_hw1q.html#q2i",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2i",
    "text": "Q2i\nFind the top ten scorers (in terms of points) and print them including their number of point and their respective team."
  },
  {
    "objectID": "DANL210_hw1q.html#q2j",
    "href": "DANL210_hw1q.html#q2j",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q2j",
    "text": "Q2j\nWhat are the three countries with the most players originating from?"
  },
  {
    "objectID": "DANL210_hw1q.html#q3a",
    "href": "DANL210_hw1q.html#q3a",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q3a",
    "text": "Q3a\nFor each type of mine, calculate the total coal production for each pair of state-year."
  },
  {
    "objectID": "DANL210_hw1q.html#q3b",
    "href": "DANL210_hw1q.html#q3b",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q3b",
    "text": "Q3b\nFind the top 5 coal-producing states for each year."
  },
  {
    "objectID": "DANL210_hw1q.html#q3c",
    "href": "DANL210_hw1q.html#q3c",
    "title": "DANL 210: Data Preparation and ManagementHomework Assignment 1",
    "section": "Q3c",
    "text": "Q3c\nVisualize the yearly trend of the total coal production from each type of mine."
  },
  {
    "objectID": "DANL200_hw1q.html",
    "href": "DANL200_hw1q.html",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "",
    "text": "Step 1. Download the compressed ZIP file, ny_colleges.zip, from the Homework Assignment 1 in our Canvas.\nStep 2. Extract the file, ny_colleges.zip, so that you can access the file, NY_colleges.csv, for Homework Assignment 1.\n\n\n\n\n\n\nNY_colleges.csv is university-year level data about\n\n\nmedian debt of college students,\n\n\nnet price of college\n\n\nnumber of college students,\n\n\ncollege majors\n\n\n\nwith a variety of segmentation.\n\nA description of each variable in NY_colleges.csv is provided in ny_colleges.yaml, which we can open in RStudio or other text editors.\nA description of values of each variable in NY_colleges.csv is provided in columns, VARIABLE_NAME, VALUE, and LABEL, in ny_colleges_vars.xlsx, which we can open in Microsoft Excel.\nUsing Ctrl + F (cmd + F for mac users) would be useful to find the variable description.\nI recommend you to copy and paste the description of the variable you use in your R code to your R script with a comment (# …).\nFrom the file, ny_colleges_vars.xlsx, we can find that\n\nCIP**BACHL, whose value is either 0, 1, or 2, indicates whether a university offers a bachelor’s degree in SOME MAJOR.\n\n0: Program not offered\n1: Program offered\n2: Program offered through an exclusively distance-education program"
  },
  {
    "objectID": "DANL200_hw1q.html#q1a",
    "href": "DANL200_hw1q.html#q1a",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1a",
    "text": "Q1a\nRead the data file, NY_colleges.csv, as the data.frame object with the name, NY_colleges, using (1) the read_csv() function and (2) the absolute path name of the file NY_colleges.csv from your local hard disk drive in your laptop."
  },
  {
    "objectID": "DANL200_hw1q.html#q1b",
    "href": "DANL200_hw1q.html#q1b",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1b",
    "text": "Q1b\nWhat are the mean, median1, minimum, maximum, and standard deviation for each of the following variables?\n\n\naverage net price of public institution;\n\n\naverage net price of private institution;\n\n\nmedian debt for students who have completed;\n\n\nmedian debt for students who have not completed."
  },
  {
    "objectID": "DANL200_hw1q.html#instruction-for-q1c-q1i",
    "href": "DANL200_hw1q.html#instruction-for-q1c-q1i",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Instruction for Q1c-Q1i",
    "text": "Instruction for Q1c-Q1i\nFrom Q1c to Q1g, provide both (1) ggplot codes and (2) a couple of sentences to answer the questions."
  },
  {
    "objectID": "DANL200_hw1q.html#q1c",
    "href": "DANL200_hw1q.html#q1c",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1c",
    "text": "Q1c\nCompare between public institutions and private institutions in terms of the distribution of average net price."
  },
  {
    "objectID": "DANL200_hw1q.html#q1d",
    "href": "DANL200_hw1q.html#q1d",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1d",
    "text": "Q1d\nCompare between public institutions and private institutions in terms of the relationship between (1) average net price and (2) median debt for students who have completed."
  },
  {
    "objectID": "DANL200_hw1q.html#q1e",
    "href": "DANL200_hw1q.html#q1e",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1e",
    "text": "Q1e\nHow does the relationship between (1) average net price and (2) median debt for students who have completed vary by levels of family income?"
  },
  {
    "objectID": "DANL200_hw1q.html#q1f",
    "href": "DANL200_hw1q.html#q1f",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1f",
    "text": "Q1f\nCompare between public institutions and private institutions in terms of the proportion of high-income students."
  },
  {
    "objectID": "DANL200_hw1q.html#q1g",
    "href": "DANL200_hw1q.html#q1g",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1g",
    "text": "Q1g\nDescribe how the number of students in a college varies by whether or not a college offers bachelor’s degree in Business, Management, Marketing, and Related Support Services."
  },
  {
    "objectID": "DANL200_hw1q.html#q1h",
    "href": "DANL200_hw1q.html#q1h",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1h",
    "text": "Q1h\nDescribe how the median debt for students who have completed varies by whether or not a college offers bachelor’s degree in Business, Management, Marketing, and Related Support Services."
  },
  {
    "objectID": "DANL200_hw1q.html#q1i",
    "href": "DANL200_hw1q.html#q1i",
    "title": "DANL 200: Introduction to Data AnalyticsHomework Assignment 1",
    "section": "Q1i",
    "text": "Q1i\nDescribe how the yearly trend of the median debt for students varies by levels of family income."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analytics at SUNY Geneseo",
    "section": "",
    "text": "data visualization and machine learning for business and economics with python and r\nweb projects with quarto, r markdown, and python notebook\ndata preparation and management with python, r, api, and sql\nweb scrapping and automation with python selenium\nversion control with git and github"
  },
  {
    "objectID": "DANL200_lab1q.html",
    "href": "DANL200_lab1q.html",
    "title": "R Lab 1 - ggplot visualization",
    "section": "",
    "text": "Load Packages and data.frames\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "DANL210_lab1q_v3.html",
    "href": "DANL210_lab1q_v3.html",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "",
    "text": "import pandas as pd\nfrom skimpy import skim"
  },
  {
    "objectID": "DANL210_lab1q_v3.html#load-dataframe",
    "href": "DANL210_lab1q_v3.html#load-dataframe",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Load DataFrame",
    "text": "Load DataFrame\n\ndf_ny = pd.read_csv('https://bcdanl.github.io/data/NY_pinc_pop.csv')\ndf_ny.head(10)\n\n\n\n\n\n  \n    \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n  \n  \n    \n      0\n      36001\n      Albany\n      2015\n      55120\n      44478\n      204024\n    \n    \n      1\n      36001\n      Albany\n      2016\n      55126\n      45357\n      204003\n    \n    \n      2\n      36001\n      Albany\n      2017\n      58814\n      45589\n      204833\n    \n    \n      3\n      36001\n      Albany\n      2018\n      59547\n      45521\n      204509\n    \n    \n      4\n      36001\n      Albany\n      2019\n      61876\n      45150\n      204918\n    \n    \n      5\n      36001\n      Albany\n      2020\n      66632\n      44608\n      205082\n    \n    \n      6\n      36003\n      Allegany\n      2015\n      32205\n      7461\n      30568\n    \n    \n      7\n      36003\n      Allegany\n      2016\n      32417\n      7493\n      30449\n    \n    \n      8\n      36003\n      Allegany\n      2017\n      34001\n      7377\n      30331\n    \n    \n      9\n      36003\n      Allegany\n      2018\n      34553\n      7284\n      30155\n    \n  \n\n\n\n\n\nVariable Description\n\nFIPS: ID number for a county\npincp: average personal income in a county X in year Y\npop_18_24: population 18 to 24 years\npop_25_over: population 25 years and over\n\nSummarize DataFrame df_ny.\n\n\nskim(df_ny)\n\n╭──────────────────────────────────────────────── skimpy summary ─────────────────────────────────────────────────╮\n│          Data Summary                Data Types                                                                 │\n│ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓                                                          │\n│ ┃ dataframe         ┃ Values ┃ ┃ Column Type ┃ Count ┃                                                          │\n│ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩                                                          │\n│ │ Number of rows    │ 372    │ │ int64       │ 5     │                                                          │\n│ │ Number of columns │ 6      │ │ string      │ 1     │                                                          │\n│ └───────────────────┴────────┘ └─────────────┴───────┘                                                          │\n│                                                     number                                                      │\n│ ┏━━━━━━━━━━━━━━━━━┳━━━━━━┳━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┓  │\n│ ┃ column_name     ┃ NA   ┃ NA %   ┃ mean     ┃ sd       ┃ p0      ┃ p25     ┃ p75      ┃ p100      ┃ hist    ┃  │\n│ ┡━━━━━━━━━━━━━━━━━╇━━━━━━╇━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━┩  │\n│ │ FIPS            │    0 │      0 │    36000 │       36 │   36000 │   36000 │    36000 │     36000 │ █▇▇▇▇█  │  │\n│ │ year            │    0 │      0 │     2000 │      1.7 │    2000 │    2000 │     2000 │      2000 │ ██████  │  │\n│ │ pincp           │    0 │      0 │    50000 │    20000 │   32000 │   41000 │    52000 │    190000 │   █▁    │  │\n│ │ pop_18_24       │    0 │      0 │    31000 │    49000 │     320 │    4700 │    28000 │    250000 │   █▁    │  │\n│ │ pop_25_over     │    0 │      0 │   220000 │   380000 │    3500 │   35000 │   160000 │   1800000 │    █    │  │\n│ └─────────────────┴──────┴────────┴──────────┴──────────┴─────────┴─────────┴──────────┴───────────┴─────────┘  │\n│                                                     string                                                      │\n│ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━┓  │\n│ ┃ column_name               ┃ NA      ┃ NA %       ┃ words per row                ┃ total words              ┃  │\n│ ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━┩  │\n│ │ county_name               │       0 │          0 │                            1 │                      380 │  │\n│ └───────────────────────────┴─────────┴────────────┴──────────────────────────────┴──────────────────────────┘  │\n╰────────────────────────────────────────────────────── End ──────────────────────────────────────────────────────╯\n\n\n\n\ndf_ny.describe()\n\n\n\n\n\n  \n    \n      \n      FIPS\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n  \n  \n    \n      count\n      372.000000\n      372.000000\n      372.000000\n      372.000000\n      3.720000e+02\n    \n    \n      mean\n      36062.000000\n      2017.500000\n      50102.801075\n      30601.064516\n      2.190541e+05\n    \n    \n      std\n      35.839264\n      1.710125\n      20291.643067\n      49283.641237\n      3.797498e+05\n    \n    \n      min\n      36001.000000\n      2015.000000\n      31831.000000\n      323.000000\n      3.485000e+03\n    \n    \n      25%\n      36031.000000\n      2016.000000\n      40612.250000\n      4675.750000\n      3.520200e+04\n    \n    \n      50%\n      36062.000000\n      2017.500000\n      45269.000000\n      9668.500000\n      5.985150e+04\n    \n    \n      75%\n      36093.000000\n      2019.000000\n      51998.000000\n      28099.250000\n      1.605870e+05\n    \n    \n      max\n      36123.000000\n      2020.000000\n      191220.000000\n      251964.000000\n      1.789355e+06\n    \n  \n\n\n\n\n\ndf_ny.groupby('year')['pincp'].describe()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      62.0\n      45449.580645\n      17342.754837\n      31831.0\n      37523.75\n      40790.5\n      47230.50\n      152793.0\n    \n    \n      2016\n      62.0\n      46474.064516\n      18544.679598\n      32417.0\n      38140.00\n      41283.0\n      48046.25\n      163112.0\n    \n    \n      2017\n      62.0\n      49078.548387\n      20323.712796\n      34001.0\n      40197.25\n      43617.5\n      50476.00\n      179655.0\n    \n    \n      2018\n      62.0\n      50400.483871\n      21110.934480\n      34553.0\n      40867.25\n      44751.5\n      52062.25\n      184539.0\n    \n    \n      2019\n      62.0\n      52551.370968\n      21381.379235\n      37131.0\n      42687.25\n      46772.0\n      54339.25\n      187213.0\n    \n    \n      2020\n      62.0\n      56662.758065\n      21384.820890\n      40840.0\n      47044.75\n      50577.5\n      58764.00\n      191220.0\n    \n  \n\n\n\n\n\ndf_ny.groupby('year')['pop_18_24'].describe()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      62.0\n      32025.887097\n      52851.482119\n      466.0\n      5039.00\n      9875.5\n      28233.25\n      251964.0\n    \n    \n      2016\n      62.0\n      31725.241935\n      51964.450784\n      382.0\n      5082.75\n      9900.5\n      28467.75\n      244788.0\n    \n    \n      2017\n      62.0\n      31195.403226\n      50824.225228\n      386.0\n      4903.50\n      9762.5\n      28317.00\n      236951.0\n    \n    \n      2018\n      62.0\n      30169.000000\n      48502.347023\n      406.0\n      4740.50\n      9577.5\n      27736.25\n      223707.0\n    \n    \n      2019\n      62.0\n      29546.500000\n      47141.642477\n      323.0\n      4550.25\n      9473.0\n      27574.00\n      215081.0\n    \n    \n      2020\n      62.0\n      28944.354839\n      45967.793981\n      369.0\n      4403.25\n      9394.0\n      27272.00\n      207966.0\n    \n  \n\n\n\n\n\ndf_ny.groupby('year')['pop_25_over'].describe()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      62.0\n      216706.370968\n      376492.870083\n      3546.0\n      35351.25\n      60028.0\n      159284.50\n      1735647.0\n    \n    \n      2016\n      62.0\n      217807.790323\n      379394.903521\n      3575.0\n      35209.50\n      60022.5\n      159512.25\n      1753695.0\n    \n    \n      2017\n      62.0\n      220335.629032\n      386192.777963\n      3604.0\n      35328.75\n      60108.0\n      160193.00\n      1789355.0\n    \n    \n      2018\n      62.0\n      219457.129032\n      383470.172157\n      3536.0\n      35492.25\n      59851.5\n      160939.50\n      1777281.0\n    \n    \n      2019\n      62.0\n      219869.951613\n      384159.431483\n      3567.0\n      35138.50\n      59689.0\n      161993.50\n      1780247.0\n    \n    \n      2020\n      62.0\n      220147.693548\n      384199.007544\n      3485.0\n      35528.00\n      59656.5\n      163294.50\n      1780524.0"
  },
  {
    "objectID": "DANL210_lab1q_v3.html#q1a",
    "href": "DANL210_lab1q_v3.html#q1a",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1a",
    "text": "Q1a\n\nUse .sort_values() to find the top 5 rich counties in NY for each year.\n\nDo not use .apply()"
  },
  {
    "objectID": "DANL210_lab1q_v3.html#q1b",
    "href": "DANL210_lab1q_v3.html#q1b",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1b",
    "text": "Q1b\n\nUse .rank() to find the top 5 rich counties in NY for each year.\n\nDo not use .apply()"
  },
  {
    "objectID": "DANL210_lab1q_v3.html#q1c",
    "href": "DANL210_lab1q_v3.html#q1c",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1c",
    "text": "Q1c\n\nUse apply() with a lambda function and .sort_values() to find the top 5 rich counties in NY for each year."
  },
  {
    "objectID": "DANL210_lab1q_v3.html#q1d",
    "href": "DANL210_lab1q_v3.html#q1d",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1d",
    "text": "Q1d\n\nWrite a function with def and .sort_values() that selects the top 5 pincp values.\nThen, use the defined function in apply() to find the top 5 rich counties in NY for each year."
  },
  {
    "objectID": "DANL210_lab1q_v3.html#q1e",
    "href": "DANL210_lab1q_v3.html#q1e",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1e",
    "text": "Q1e\n\nVisualize the yearly trend of the mean level of pincp."
  },
  {
    "objectID": "DANL210_lab1q_v2.html",
    "href": "DANL210_lab1q_v2.html",
    "title": "Python Lab 1 - Pandas Group Operations",
    "section": "",
    "text": "Load Data\n\nimport pandas as pd\ndf_ny = pd.read_csv('https://bcdanl.github.io/data/NY_pinc_pop.csv')\ndf_ny.head(10)\n\n\n\n\n\n  \n    \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n  \n  \n    \n      0\n      36001\n      Albany\n      2015\n      55120\n      44478\n      204024\n    \n    \n      1\n      36001\n      Albany\n      2016\n      55126\n      45357\n      204003\n    \n    \n      2\n      36001\n      Albany\n      2017\n      58814\n      45589\n      204833\n    \n    \n      3\n      36001\n      Albany\n      2018\n      59547\n      45521\n      204509\n    \n    \n      4\n      36001\n      Albany\n      2019\n      61876\n      45150\n      204918\n    \n    \n      5\n      36001\n      Albany\n      2020\n      66632\n      44608\n      205082\n    \n    \n      6\n      36003\n      Allegany\n      2015\n      32205\n      7461\n      30568\n    \n    \n      7\n      36003\n      Allegany\n      2016\n      32417\n      7493\n      30449\n    \n    \n      8\n      36003\n      Allegany\n      2017\n      34001\n      7377\n      30331\n    \n    \n      9\n      36003\n      Allegany\n      2018\n      34553\n      7284\n      30155\n    \n  \n\n\n\n\n\nVariable Description\n\nFIPS: ID number for a county\npincp: average personal income in a county X in year Y\npop_18_24: population 18 to 24 years\npop_25_over: population 25 years and over\n\n\n\n\nQ1a\n\nUse .sort_values() to find the top 5 rich counties in NY for each year.\n\nDo not use .apply().\n\n\n\n\n\nQ1b\n\nUse .rank() to find the top 5 rich counties in NY for each year.\n\nDo not use apply().\n\n\n\n\n\nQ1c\n\nUse apply() with a lambda function and .sort_values() to find the top 5 rich counties in NY for each year.\n\n\n\n\nQ1d\n\nWrite a function with def and .sort_values() that selects the top 5 pincp values.\nThen, use the defined function in apply() to find the top 5 rich counties in NY for each year.\n\n\n\n\nQ1e\n\nVisualize the yearly trend of the mean level of pincp."
  },
  {
    "objectID": "DANL310_hw1q.html",
    "href": "DANL310_hw1q.html",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "",
    "text": "Renovate your personal website on GitHub using Quarto.\n\nFAQ about Quarto for R Markdown users are provided below: https://quarto.org/docs/faq/rmarkdown.html\nA guide for creating a Quarto website is provided in the following webpage: https://quarto.org/docs/websites/."
  },
  {
    "objectID": "DANL310_hw1q.html#q2a.",
    "href": "DANL310_hw1q.html#q2a.",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2a.",
    "text": "Q2a.\nUse the following data.frame for Q2a, Q2b, and Q2c.\n\nncdc_temp <- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')"
  },
  {
    "objectID": "DANL310_hw1q.html#q2b",
    "href": "DANL310_hw1q.html#q2b",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2b",
    "text": "Q2b"
  },
  {
    "objectID": "DANL310_hw1q.html#q2c",
    "href": "DANL310_hw1q.html#q2c",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2c",
    "text": "Q2c\nUse ggridges::geom_density_ridges() for Q2c."
  },
  {
    "objectID": "DANL310_hw1q.html#q2d",
    "href": "DANL310_hw1q.html#q2d",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2d",
    "text": "Q2d\nUse ggplot::mtcars for Q2d."
  },
  {
    "objectID": "DANL310_hw1q.html#q2e",
    "href": "DANL310_hw1q.html#q2e",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2e",
    "text": "Q2e\nUse the following data.frame for Q2e.\n\npopgrowth_df <- read_csv(\n  'https://bcdanl.github.io/data/popgrowth.csv')"
  },
  {
    "objectID": "DANL310_hw1q.html#q2f",
    "href": "DANL310_hw1q.html#q2f",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2f",
    "text": "Q2f\nUse the following data.frame for Q2f.\n\nmale_Aus <- read_csv(\n  'https://bcdanl.github.io/data/aus_athletics_male.csv')"
  },
  {
    "objectID": "DANL310_hw1q.html#q2g",
    "href": "DANL310_hw1q.html#q2g",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2g",
    "text": "Q2g\nUse the following data.frame for Q2g.\n\ntitanic <- read_csv(\n  'https://bcdanl.github.io/data/titanic_cleaned.csv')"
  },
  {
    "objectID": "DANL310_hw1q.html#q2h",
    "href": "DANL310_hw1q.html#q2h",
    "title": "DANL 310: Data Visualization and PresentationHomework Assignment 1",
    "section": "Q2h",
    "text": "Q2h\nUse the following data.frame for Q2h.\n\ncows_filtered <- read_csv(\n  'https://bcdanl.github.io/data/cows_filtered.csv')"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Geneseo DANL",
    "section": "",
    "text": "I view myself as an applied economist with interest in environmental economics and a particular focus on climate change. Methodologically, I make use of causal inference/econometrics/machine learning methods, and other data science tools to conduct empirical analysis. I also use computational methods to solve integrated assessment models of climate change and theoretical economic models, such as dynamic contracts.\nMy research focuses on how to improve effectiveness of climate policy at both micro and macro levels. In particular, I am interested in building relevant climate-economy models that analyze the interaction between economies and the climate under risks arising from (1) climate change and (2) a transition to carbon-neutral economies.\nAs an economics and data science teacher, my goal is to equip students with the essential tools of machine learning, econometrics, and data science to think critically about business and real-world socioeconomic issues. In this regard, I teach students to use those tools to address important business strategies, socioeconomic issues, and individual decision-making."
  },
  {
    "objectID": "cv.html#working-papers",
    "href": "cv.html#working-papers",
    "title": "Geneseo DANL",
    "section": "Working papers",
    "text": "Working papers\n\n\n\n\n\n  \n     \n    Social Media Campaigns, Lobbying and Legislation: Evidence from #climatechange/#globalwarming and Energy Lobbies   *Abstract*: To what extent do social media campaigns compete with fossil fuel lobbying on climate change legislation? In this article, I estimate the effect of social media campaigns on a congressperson's legislative activities against climate change actions during the U.S. Congresses (January 2013-January 2019). I find that (1) a 1% increase in the per-capita level of activities of climate change campaigns using Twitter decreases Democrats' tendency to support climate-unfriendly legislation by 0.9%, while it increases Republicans' one by 0.2%; and (2) a 1% increase in the fossil fuel industry's lobbying expenditure relative to the rest of industries' lobbying expenditure increases Republicans' tendency to support climate-unfriendly legislation by 1.1%. I also find that negative sentiment in social media campaigns contributes to affecting congresspersons' support for climate-unfriendly legislation. \n  \n  \n     \n    Climate Finance under Conflicts and Renegotiations: A Dynamic Contract Approach  (AEA 2019 poster)    *Abstract*: Considering climate funds (e.g. the Green Climate Fund) as the financial mechanism to provide funding to developing countries, this paper examines a long-term climate funding relationship between two agents---the rich country and the poor country. Conflicts between the rich and poor countries arise when determining 1) the size of climate funding that the rich country contributes to the poor country, and 2) the funding allocation between climate adaptation and mitigation projects in the poor country. In addition, the rich country cannot be forced to commit contractual contributions to the poor country, and the climate funding relationship can be repeatedly renegotiated. This paper derives the following results: (1) climate funds converge to the first-best in the long-run, in terms of the size of climate funding and its balance between adaptation and mitigation projects, if and only if climate damage becomes sufficiently severe. (2) funding allocation between adaptation and mitigation projects becomes more favorable to the poor country if marginal climate costs in the poor country grow faster than in the rich country. (3) fewer conflicts and fewer renegotiations between the rich and poor countries make climate funding contracts more efficient, remedying inequality between the poor and rich countries."
  },
  {
    "objectID": "cv.html#work-in-progress",
    "href": "cv.html#work-in-progress",
    "title": "Geneseo DANL",
    "section": "Work in progress",
    "text": "Work in progress\n\n\n\n\n\n  \n     \n    Hiding Behind a Small Cake' in an Online Dictator Game: The Way You Hide Matters!, (with Tabare Capitan (1st author) , Jason Shogren, and Benjamin White)  *Abstract*: Using an online dictator game in which receivers have incomplete information of the size of the endowment (big or small), the article, ''Hiding behind a small cake' in a newspaper dictator game (Ockenfels and Werner (2012))'' shows that a few givers who received the big endowment use their giving to signal they received the small endowment (i.e., to lie). In other words, even though a giver will never meet the corresponding receiver, he cares enough about how he could be perceived by others to lie (i.e., second-order beliefs enters his utility function). In our experiment we provide givers with the opportunity to lie about the size of the endowment without using their giving. Similar to Ockenfels and Werner (2012) we find that (i) few take the opportunity to lie---but those who do give less when their giving is not constrained by its role as a signal---and (ii) givers are more likely to lie when the lie is private. However, using a second stage in the experimental design, we show that liars are the most responsive group of givers to a simple message stating the expectation of the receiver."
  },
  {
    "objectID": "cv.html#presentations",
    "href": "cv.html#presentations",
    "title": "Geneseo DANL",
    "section": "Presentations",
    "text": "Presentations\n\n\n\n\n\n  \n    2022 \n    Interdisciplinary Data Science Workshop, Brigham Young University, Provo, Utah \n  \n  \n    2021 \n    Online Seminar, Department of Environmental and Business Economics, University of Southern Denmark \n  \n  \n    2019 \n    University of Wyoming & Colorado State University Economics Graduate Student Symposium, Laramie, Wyoming \n  \n  \n    2019 \n    American Economic Association Annual Meeting (poster session), Atlanta, Georgia \n  \n  \n    2018 \n    The 29th International Conference on Game Theory, Stony Brook, New York"
  },
  {
    "objectID": "cv.html#memberships",
    "href": "cv.html#memberships",
    "title": "Geneseo DANL",
    "section": "Memberships",
    "text": "Memberships\n\n\n\n\n\n  \n    2022 --- present \n    Southern Economic Association \n  \n  \n    2018 --- present \n    Association of Environmental and Resource Economists \n  \n  \n    2017 --- present \n    American Economic Association \n  \n  \n    2017 --- 2019 \n    Econometric Society"
  },
  {
    "objectID": "DANL210_lab1q.html",
    "href": "DANL210_lab1q.html",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "",
    "text": "import pandas as pd\nfrom skimpy import skim"
  },
  {
    "objectID": "DANL210_lab1q.html#load-dataframe",
    "href": "DANL210_lab1q.html#load-dataframe",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Load DataFrame",
    "text": "Load DataFrame\n\ndf_ny = pd.read_csv('https://bcdanl.github.io/data/NY_pinc_pop.csv')\ndf_ny.head(10)\n\n\n\n\n\n  \n    \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n  \n  \n    \n      0\n      36001\n      Albany\n      2015\n      55120\n      44478\n      204024\n    \n    \n      1\n      36001\n      Albany\n      2016\n      55126\n      45357\n      204003\n    \n    \n      2\n      36001\n      Albany\n      2017\n      58814\n      45589\n      204833\n    \n    \n      3\n      36001\n      Albany\n      2018\n      59547\n      45521\n      204509\n    \n    \n      4\n      36001\n      Albany\n      2019\n      61876\n      45150\n      204918\n    \n    \n      5\n      36001\n      Albany\n      2020\n      66632\n      44608\n      205082\n    \n    \n      6\n      36003\n      Allegany\n      2015\n      32205\n      7461\n      30568\n    \n    \n      7\n      36003\n      Allegany\n      2016\n      32417\n      7493\n      30449\n    \n    \n      8\n      36003\n      Allegany\n      2017\n      34001\n      7377\n      30331\n    \n    \n      9\n      36003\n      Allegany\n      2018\n      34553\n      7284\n      30155\n    \n  \n\n\n\n\n\nVariable Description\n\nFIPS: ID number for a county\npincp: average personal income in a county X in year Y\npop_18_24: population 18 to 24 years\npop_25_over: population 25 years and over\n\nSummarize DataFrame df_ny.\n\n\nskim(df_ny)\n\n╭──────────────────────────────────────────────── skimpy summary ─────────────────────────────────────────────────╮\n│          Data Summary                Data Types                                                                 │\n│ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓                                                          │\n│ ┃ dataframe         ┃ Values ┃ ┃ Column Type ┃ Count ┃                                                          │\n│ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩                                                          │\n│ │ Number of rows    │ 372    │ │ int64       │ 5     │                                                          │\n│ │ Number of columns │ 6      │ │ string      │ 1     │                                                          │\n│ └───────────────────┴────────┘ └─────────────┴───────┘                                                          │\n│                                                     number                                                      │\n│ ┏━━━━━━━━━━━━━━━━━┳━━━━━━┳━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┓  │\n│ ┃ column_name     ┃ NA   ┃ NA %   ┃ mean     ┃ sd       ┃ p0      ┃ p25     ┃ p75      ┃ p100      ┃ hist    ┃  │\n│ ┡━━━━━━━━━━━━━━━━━╇━━━━━━╇━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━┩  │\n│ │ FIPS            │    0 │      0 │    36000 │       36 │   36000 │   36000 │    36000 │     36000 │ █▇▇▇▇█  │  │\n│ │ year            │    0 │      0 │     2000 │      1.7 │    2000 │    2000 │     2000 │      2000 │ ██████  │  │\n│ │ pincp           │    0 │      0 │    50000 │    20000 │   32000 │   41000 │    52000 │    190000 │   █▁    │  │\n│ │ pop_18_24       │    0 │      0 │    31000 │    49000 │     320 │    4700 │    28000 │    250000 │   █▁    │  │\n│ │ pop_25_over     │    0 │      0 │   220000 │   380000 │    3500 │   35000 │   160000 │   1800000 │    █    │  │\n│ └─────────────────┴──────┴────────┴──────────┴──────────┴─────────┴─────────┴──────────┴───────────┴─────────┘  │\n│                                                     string                                                      │\n│ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━┓  │\n│ ┃ column_name               ┃ NA      ┃ NA %       ┃ words per row                ┃ total words              ┃  │\n│ ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━┩  │\n│ │ county_name               │       0 │          0 │                            1 │                      380 │  │\n│ └───────────────────────────┴─────────┴────────────┴──────────────────────────────┴──────────────────────────┘  │\n╰────────────────────────────────────────────────────── End ──────────────────────────────────────────────────────╯\n\n\n\n\ndf_ny.describe()\n\n\n\n\n\n  \n    \n      \n      FIPS\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n  \n  \n    \n      count\n      372.000000\n      372.000000\n      372.000000\n      372.000000\n      3.720000e+02\n    \n    \n      mean\n      36062.000000\n      2017.500000\n      50102.801075\n      30601.064516\n      2.190541e+05\n    \n    \n      std\n      35.839264\n      1.710125\n      20291.643067\n      49283.641237\n      3.797498e+05\n    \n    \n      min\n      36001.000000\n      2015.000000\n      31831.000000\n      323.000000\n      3.485000e+03\n    \n    \n      25%\n      36031.000000\n      2016.000000\n      40612.250000\n      4675.750000\n      3.520200e+04\n    \n    \n      50%\n      36062.000000\n      2017.500000\n      45269.000000\n      9668.500000\n      5.985150e+04\n    \n    \n      75%\n      36093.000000\n      2019.000000\n      51998.000000\n      28099.250000\n      1.605870e+05\n    \n    \n      max\n      36123.000000\n      2020.000000\n      191220.000000\n      251964.000000\n      1.789355e+06\n    \n  \n\n\n\n\n\ndf_ny.groupby('year')['pincp'].describe()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      62.0\n      45449.580645\n      17342.754837\n      31831.0\n      37523.75\n      40790.5\n      47230.50\n      152793.0\n    \n    \n      2016\n      62.0\n      46474.064516\n      18544.679598\n      32417.0\n      38140.00\n      41283.0\n      48046.25\n      163112.0\n    \n    \n      2017\n      62.0\n      49078.548387\n      20323.712796\n      34001.0\n      40197.25\n      43617.5\n      50476.00\n      179655.0\n    \n    \n      2018\n      62.0\n      50400.483871\n      21110.934480\n      34553.0\n      40867.25\n      44751.5\n      52062.25\n      184539.0\n    \n    \n      2019\n      62.0\n      52551.370968\n      21381.379235\n      37131.0\n      42687.25\n      46772.0\n      54339.25\n      187213.0\n    \n    \n      2020\n      62.0\n      56662.758065\n      21384.820890\n      40840.0\n      47044.75\n      50577.5\n      58764.00\n      191220.0\n    \n  \n\n\n\n\n\ndf_ny.groupby('year')['pop_18_24'].describe()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      62.0\n      32025.887097\n      52851.482119\n      466.0\n      5039.00\n      9875.5\n      28233.25\n      251964.0\n    \n    \n      2016\n      62.0\n      31725.241935\n      51964.450784\n      382.0\n      5082.75\n      9900.5\n      28467.75\n      244788.0\n    \n    \n      2017\n      62.0\n      31195.403226\n      50824.225228\n      386.0\n      4903.50\n      9762.5\n      28317.00\n      236951.0\n    \n    \n      2018\n      62.0\n      30169.000000\n      48502.347023\n      406.0\n      4740.50\n      9577.5\n      27736.25\n      223707.0\n    \n    \n      2019\n      62.0\n      29546.500000\n      47141.642477\n      323.0\n      4550.25\n      9473.0\n      27574.00\n      215081.0\n    \n    \n      2020\n      62.0\n      28944.354839\n      45967.793981\n      369.0\n      4403.25\n      9394.0\n      27272.00\n      207966.0\n    \n  \n\n\n\n\n\ndf_ny.groupby('year')['pop_25_over'].describe()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      62.0\n      216706.370968\n      376492.870083\n      3546.0\n      35351.25\n      60028.0\n      159284.50\n      1735647.0\n    \n    \n      2016\n      62.0\n      217807.790323\n      379394.903521\n      3575.0\n      35209.50\n      60022.5\n      159512.25\n      1753695.0\n    \n    \n      2017\n      62.0\n      220335.629032\n      386192.777963\n      3604.0\n      35328.75\n      60108.0\n      160193.00\n      1789355.0\n    \n    \n      2018\n      62.0\n      219457.129032\n      383470.172157\n      3536.0\n      35492.25\n      59851.5\n      160939.50\n      1777281.0\n    \n    \n      2019\n      62.0\n      219869.951613\n      384159.431483\n      3567.0\n      35138.50\n      59689.0\n      161993.50\n      1780247.0\n    \n    \n      2020\n      62.0\n      220147.693548\n      384199.007544\n      3485.0\n      35528.00\n      59656.5\n      163294.50\n      1780524.0"
  },
  {
    "objectID": "DANL210_lab1q.html#q1a",
    "href": "DANL210_lab1q.html#q1a",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1a",
    "text": "Q1a\n\nUse .sort_values() to find the top 5 rich counties in NY for each year.\n\nDo not use .apply()"
  },
  {
    "objectID": "DANL210_lab1q.html#q1b",
    "href": "DANL210_lab1q.html#q1b",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1b",
    "text": "Q1b\n\nUse .rank() to find the top 5 rich counties in NY for each year.\n\nDo not use .apply()"
  },
  {
    "objectID": "DANL210_lab1q.html#q1c",
    "href": "DANL210_lab1q.html#q1c",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1c",
    "text": "Q1c\n\nUse apply() with a lambda function and .sort_values() to find the top 5 rich counties in NY for each year."
  },
  {
    "objectID": "DANL210_lab1q.html#q1d",
    "href": "DANL210_lab1q.html#q1d",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1d",
    "text": "Q1d\n\nWrite a function with def and .sort_values() that selects the top 5 pincp values.\nThen, use the defined function in apply() to find the top 5 rich counties in NY for each year."
  },
  {
    "objectID": "DANL210_lab1q.html#q1e",
    "href": "DANL210_lab1q.html#q1e",
    "title": "Python Lab 1 - Pandas Group Operations and apply()",
    "section": "Q1e",
    "text": "Q1e\n\nVisualize the yearly trend of the mean level of pincp."
  },
  {
    "objectID": "DANL210_lab1a.html",
    "href": "DANL210_lab1a.html",
    "title": "Python Lab 1 - Pandas Group Operations",
    "section": "",
    "text": "Load Data\n\nimport pandas as pd\ndf_ny = pd.read_csv('https://bcdanl.github.io/data/NY_pinc_pop.csv')\ndf_ny.head(10)\n\n\n\n\n\n  \n    \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n  \n  \n    \n      0\n      36001\n      Albany\n      2015\n      55120\n      44478\n      204024\n    \n    \n      1\n      36001\n      Albany\n      2016\n      55126\n      45357\n      204003\n    \n    \n      2\n      36001\n      Albany\n      2017\n      58814\n      45589\n      204833\n    \n    \n      3\n      36001\n      Albany\n      2018\n      59547\n      45521\n      204509\n    \n    \n      4\n      36001\n      Albany\n      2019\n      61876\n      45150\n      204918\n    \n    \n      5\n      36001\n      Albany\n      2020\n      66632\n      44608\n      205082\n    \n    \n      6\n      36003\n      Allegany\n      2015\n      32205\n      7461\n      30568\n    \n    \n      7\n      36003\n      Allegany\n      2016\n      32417\n      7493\n      30449\n    \n    \n      8\n      36003\n      Allegany\n      2017\n      34001\n      7377\n      30331\n    \n    \n      9\n      36003\n      Allegany\n      2018\n      34553\n      7284\n      30155\n    \n  \n\n\n\n\n\nVariable Description\n\nFIPS: ID number for a county\npincp: average personal income in a county X in year Y\npop_18_24: population 18 to 24 years\npop_25_over: population 25 years and over\n\n\n\n\nQ1a\n\nUse .sort_values() to find the top 5 rich counties in NY for each year.\n\nDo not use .apply().\n\n\n\nq1a = (\n      df_ny\n      .sort_values(by = 'pincp', ascending = False)\n      .groupby('year').head(5)\n      .sort_values( by = ['year', 'pincp'], ascending = [True, False] )\n    )\n\nq1a\n\n\n\n\n\n  \n    \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n  \n  \n    \n      180\n      36061\n      New York\n      2015\n      152793\n      161844\n      1229036\n    \n    \n      354\n      36119\n      Westchester\n      2015\n      93495\n      83942\n      659258\n    \n    \n      174\n      36059\n      Nassau\n      2015\n      79301\n      120229\n      931785\n    \n    \n      270\n      36091\n      Saratoga\n      2015\n      61407\n      18696\n      156862\n    \n    \n      306\n      36103\n      Suffolk\n      2015\n      61203\n      138167\n      1022970\n    \n    \n      181\n      36061\n      New York\n      2016\n      163112\n      158011\n      1237623\n    \n    \n      355\n      36119\n      Westchester\n      2016\n      96251\n      85574\n      661283\n    \n    \n      175\n      36059\n      Nassau\n      2016\n      81500\n      121621\n      934765\n    \n    \n      307\n      36103\n      Suffolk\n      2016\n      63757\n      138819\n      1024860\n    \n    \n      271\n      36091\n      Saratoga\n      2016\n      63065\n      18928\n      158211\n    \n    \n      182\n      36061\n      New York\n      2017\n      179655\n      155089\n      1259137\n    \n    \n      356\n      36119\n      Westchester\n      2017\n      102861\n      86345\n      668102\n    \n    \n      176\n      36059\n      Nassau\n      2017\n      85859\n      122061\n      942504\n    \n    \n      308\n      36103\n      Suffolk\n      2017\n      66429\n      138040\n      1030141\n    \n    \n      272\n      36091\n      Saratoga\n      2017\n      65490\n      18899\n      160285\n    \n    \n      183\n      36061\n      New York\n      2018\n      184539\n      149638\n      1247071\n    \n    \n      357\n      36119\n      Westchester\n      2018\n      107252\n      85757\n      665958\n    \n    \n      177\n      36059\n      Nassau\n      2018\n      89242\n      120849\n      940610\n    \n    \n      273\n      36091\n      Saratoga\n      2018\n      70010\n      18915\n      161493\n    \n    \n      309\n      36103\n      Suffolk\n      2018\n      69209\n      136173\n      1028820\n    \n    \n      184\n      36061\n      New York\n      2019\n      187213\n      147692\n      1249365\n    \n    \n      358\n      36119\n      Westchester\n      2019\n      112037\n      85499\n      668290\n    \n    \n      178\n      36059\n      Nassau\n      2019\n      92159\n      119754\n      943013\n    \n    \n      274\n      36091\n      Saratoga\n      2019\n      72219\n      19003\n      163010\n    \n    \n      310\n      36103\n      Suffolk\n      2019\n      72180\n      134777\n      1030842\n    \n    \n      185\n      36061\n      New York\n      2020\n      191220\n      145611\n      1250303\n    \n    \n      359\n      36119\n      Westchester\n      2020\n      115386\n      85113\n      670717\n    \n    \n      179\n      36059\n      Nassau\n      2020\n      96253\n      118047\n      945100\n    \n    \n      275\n      36091\n      Saratoga\n      2020\n      77398\n      18725\n      164817\n    \n    \n      311\n      36103\n      Suffolk\n      2020\n      76713\n      133732\n      1033886\n    \n  \n\n\n\n\n\n\nQ1b\n\nUse .rank() to find the top 5 rich counties in NY for each year.\n\nDo not use apply().\n\n\n\nq1b = (\n   df_ny.assign( \n          ranking = df_ny.groupby('year')['pincp']\n                         .rank(method = 'dense', ascending = False) \n                         )\n)\n\nq1b = (\n  q1b.query('ranking <= 5')\n  .sort_values(by = ['year', 'ranking'])\n)\n\nq1b\n\n\n\n\n\n  \n    \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n      ranking\n    \n  \n  \n    \n      180\n      36061\n      New York\n      2015\n      152793\n      161844\n      1229036\n      1.0\n    \n    \n      354\n      36119\n      Westchester\n      2015\n      93495\n      83942\n      659258\n      2.0\n    \n    \n      174\n      36059\n      Nassau\n      2015\n      79301\n      120229\n      931785\n      3.0\n    \n    \n      270\n      36091\n      Saratoga\n      2015\n      61407\n      18696\n      156862\n      4.0\n    \n    \n      306\n      36103\n      Suffolk\n      2015\n      61203\n      138167\n      1022970\n      5.0\n    \n    \n      181\n      36061\n      New York\n      2016\n      163112\n      158011\n      1237623\n      1.0\n    \n    \n      355\n      36119\n      Westchester\n      2016\n      96251\n      85574\n      661283\n      2.0\n    \n    \n      175\n      36059\n      Nassau\n      2016\n      81500\n      121621\n      934765\n      3.0\n    \n    \n      307\n      36103\n      Suffolk\n      2016\n      63757\n      138819\n      1024860\n      4.0\n    \n    \n      271\n      36091\n      Saratoga\n      2016\n      63065\n      18928\n      158211\n      5.0\n    \n    \n      182\n      36061\n      New York\n      2017\n      179655\n      155089\n      1259137\n      1.0\n    \n    \n      356\n      36119\n      Westchester\n      2017\n      102861\n      86345\n      668102\n      2.0\n    \n    \n      176\n      36059\n      Nassau\n      2017\n      85859\n      122061\n      942504\n      3.0\n    \n    \n      308\n      36103\n      Suffolk\n      2017\n      66429\n      138040\n      1030141\n      4.0\n    \n    \n      272\n      36091\n      Saratoga\n      2017\n      65490\n      18899\n      160285\n      5.0\n    \n    \n      183\n      36061\n      New York\n      2018\n      184539\n      149638\n      1247071\n      1.0\n    \n    \n      357\n      36119\n      Westchester\n      2018\n      107252\n      85757\n      665958\n      2.0\n    \n    \n      177\n      36059\n      Nassau\n      2018\n      89242\n      120849\n      940610\n      3.0\n    \n    \n      273\n      36091\n      Saratoga\n      2018\n      70010\n      18915\n      161493\n      4.0\n    \n    \n      309\n      36103\n      Suffolk\n      2018\n      69209\n      136173\n      1028820\n      5.0\n    \n    \n      184\n      36061\n      New York\n      2019\n      187213\n      147692\n      1249365\n      1.0\n    \n    \n      358\n      36119\n      Westchester\n      2019\n      112037\n      85499\n      668290\n      2.0\n    \n    \n      178\n      36059\n      Nassau\n      2019\n      92159\n      119754\n      943013\n      3.0\n    \n    \n      274\n      36091\n      Saratoga\n      2019\n      72219\n      19003\n      163010\n      4.0\n    \n    \n      310\n      36103\n      Suffolk\n      2019\n      72180\n      134777\n      1030842\n      5.0\n    \n    \n      185\n      36061\n      New York\n      2020\n      191220\n      145611\n      1250303\n      1.0\n    \n    \n      359\n      36119\n      Westchester\n      2020\n      115386\n      85113\n      670717\n      2.0\n    \n    \n      179\n      36059\n      Nassau\n      2020\n      96253\n      118047\n      945100\n      3.0\n    \n    \n      275\n      36091\n      Saratoga\n      2020\n      77398\n      18725\n      164817\n      4.0\n    \n    \n      311\n      36103\n      Suffolk\n      2020\n      76713\n      133732\n      1033886\n      5.0\n    \n  \n\n\n\n\n\n\nQ1c\n\nUse apply() with a lambda function and .sort_values() to find the top 5 rich counties in NY for each year.\n\n\nq1c = (\n      df_ny\n      .groupby('year')\n      .apply( lambda x: x.sort_values(['pincp'], ascending = False )\n      .head()\n          )\n    )\n\nq1c\n\n\n\n\n\n  \n    \n      \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      180\n      36061\n      New York\n      2015\n      152793\n      161844\n      1229036\n    \n    \n      354\n      36119\n      Westchester\n      2015\n      93495\n      83942\n      659258\n    \n    \n      174\n      36059\n      Nassau\n      2015\n      79301\n      120229\n      931785\n    \n    \n      270\n      36091\n      Saratoga\n      2015\n      61407\n      18696\n      156862\n    \n    \n      306\n      36103\n      Suffolk\n      2015\n      61203\n      138167\n      1022970\n    \n    \n      2016\n      181\n      36061\n      New York\n      2016\n      163112\n      158011\n      1237623\n    \n    \n      355\n      36119\n      Westchester\n      2016\n      96251\n      85574\n      661283\n    \n    \n      175\n      36059\n      Nassau\n      2016\n      81500\n      121621\n      934765\n    \n    \n      307\n      36103\n      Suffolk\n      2016\n      63757\n      138819\n      1024860\n    \n    \n      271\n      36091\n      Saratoga\n      2016\n      63065\n      18928\n      158211\n    \n    \n      2017\n      182\n      36061\n      New York\n      2017\n      179655\n      155089\n      1259137\n    \n    \n      356\n      36119\n      Westchester\n      2017\n      102861\n      86345\n      668102\n    \n    \n      176\n      36059\n      Nassau\n      2017\n      85859\n      122061\n      942504\n    \n    \n      308\n      36103\n      Suffolk\n      2017\n      66429\n      138040\n      1030141\n    \n    \n      272\n      36091\n      Saratoga\n      2017\n      65490\n      18899\n      160285\n    \n    \n      2018\n      183\n      36061\n      New York\n      2018\n      184539\n      149638\n      1247071\n    \n    \n      357\n      36119\n      Westchester\n      2018\n      107252\n      85757\n      665958\n    \n    \n      177\n      36059\n      Nassau\n      2018\n      89242\n      120849\n      940610\n    \n    \n      273\n      36091\n      Saratoga\n      2018\n      70010\n      18915\n      161493\n    \n    \n      309\n      36103\n      Suffolk\n      2018\n      69209\n      136173\n      1028820\n    \n    \n      2019\n      184\n      36061\n      New York\n      2019\n      187213\n      147692\n      1249365\n    \n    \n      358\n      36119\n      Westchester\n      2019\n      112037\n      85499\n      668290\n    \n    \n      178\n      36059\n      Nassau\n      2019\n      92159\n      119754\n      943013\n    \n    \n      274\n      36091\n      Saratoga\n      2019\n      72219\n      19003\n      163010\n    \n    \n      310\n      36103\n      Suffolk\n      2019\n      72180\n      134777\n      1030842\n    \n    \n      2020\n      185\n      36061\n      New York\n      2020\n      191220\n      145611\n      1250303\n    \n    \n      359\n      36119\n      Westchester\n      2020\n      115386\n      85113\n      670717\n    \n    \n      179\n      36059\n      Nassau\n      2020\n      96253\n      118047\n      945100\n    \n    \n      275\n      36091\n      Saratoga\n      2020\n      77398\n      18725\n      164817\n    \n    \n      311\n      36103\n      Suffolk\n      2020\n      76713\n      133732\n      1033886\n    \n  \n\n\n\n\n\n\nQ1d\n\nWrite a function with def and .sort_values() that selects the top 5 pincp values.\nThen, use the defined function in apply() to find the top 5 rich counties in NY for each year.\n\n\ndef top(df, n=5, column=\"pincp\"):\n    return df.sort_values(column, ascending=False)[:n]\n  \nq1d = df_ny.groupby('year').apply(top)\nq1d\n\n\n\n\n\n  \n    \n      \n      \n      FIPS\n      county_name\n      year\n      pincp\n      pop_18_24\n      pop_25_over\n    \n    \n      year\n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2015\n      180\n      36061\n      New York\n      2015\n      152793\n      161844\n      1229036\n    \n    \n      354\n      36119\n      Westchester\n      2015\n      93495\n      83942\n      659258\n    \n    \n      174\n      36059\n      Nassau\n      2015\n      79301\n      120229\n      931785\n    \n    \n      270\n      36091\n      Saratoga\n      2015\n      61407\n      18696\n      156862\n    \n    \n      306\n      36103\n      Suffolk\n      2015\n      61203\n      138167\n      1022970\n    \n    \n      2016\n      181\n      36061\n      New York\n      2016\n      163112\n      158011\n      1237623\n    \n    \n      355\n      36119\n      Westchester\n      2016\n      96251\n      85574\n      661283\n    \n    \n      175\n      36059\n      Nassau\n      2016\n      81500\n      121621\n      934765\n    \n    \n      307\n      36103\n      Suffolk\n      2016\n      63757\n      138819\n      1024860\n    \n    \n      271\n      36091\n      Saratoga\n      2016\n      63065\n      18928\n      158211\n    \n    \n      2017\n      182\n      36061\n      New York\n      2017\n      179655\n      155089\n      1259137\n    \n    \n      356\n      36119\n      Westchester\n      2017\n      102861\n      86345\n      668102\n    \n    \n      176\n      36059\n      Nassau\n      2017\n      85859\n      122061\n      942504\n    \n    \n      308\n      36103\n      Suffolk\n      2017\n      66429\n      138040\n      1030141\n    \n    \n      272\n      36091\n      Saratoga\n      2017\n      65490\n      18899\n      160285\n    \n    \n      2018\n      183\n      36061\n      New York\n      2018\n      184539\n      149638\n      1247071\n    \n    \n      357\n      36119\n      Westchester\n      2018\n      107252\n      85757\n      665958\n    \n    \n      177\n      36059\n      Nassau\n      2018\n      89242\n      120849\n      940610\n    \n    \n      273\n      36091\n      Saratoga\n      2018\n      70010\n      18915\n      161493\n    \n    \n      309\n      36103\n      Suffolk\n      2018\n      69209\n      136173\n      1028820\n    \n    \n      2019\n      184\n      36061\n      New York\n      2019\n      187213\n      147692\n      1249365\n    \n    \n      358\n      36119\n      Westchester\n      2019\n      112037\n      85499\n      668290\n    \n    \n      178\n      36059\n      Nassau\n      2019\n      92159\n      119754\n      943013\n    \n    \n      274\n      36091\n      Saratoga\n      2019\n      72219\n      19003\n      163010\n    \n    \n      310\n      36103\n      Suffolk\n      2019\n      72180\n      134777\n      1030842\n    \n    \n      2020\n      185\n      36061\n      New York\n      2020\n      191220\n      145611\n      1250303\n    \n    \n      359\n      36119\n      Westchester\n      2020\n      115386\n      85113\n      670717\n    \n    \n      179\n      36059\n      Nassau\n      2020\n      96253\n      118047\n      945100\n    \n    \n      275\n      36091\n      Saratoga\n      2020\n      77398\n      18725\n      164817\n    \n    \n      311\n      36103\n      Suffolk\n      2020\n      76713\n      133732\n      1033886\n    \n  \n\n\n\n\n\n\ncf) SeriesGroupBy.nlargest()\n\nq1abcd = df_ny.groupby('year')['pincp'].nlargest(5)\n\nq1abcd\n\nyear     \n2015  180    152793\n      354     93495\n      174     79301\n      270     61407\n      306     61203\n2016  181    163112\n      355     96251\n      175     81500\n      307     63757\n      271     63065\n2017  182    179655\n      356    102861\n      176     85859\n      308     66429\n      272     65490\n2018  183    184539\n      357    107252\n      177     89242\n      273     70010\n      309     69209\n2019  184    187213\n      358    112037\n      178     92159\n      274     72219\n      310     72180\n2020  185    191220\n      359    115386\n      179     96253\n      275     77398\n      311     76713\nName: pincp, dtype: int64\n\n\n\n\nQ1e\n\nVisualize the yearly trend of the mean level of pincp.\n\n\nq1e = df_ny.groupby('year')['pincp'].mean()\nq1e.plot()\n\n<AxesSubplot:xlabel='year'>"
  }
]